# Problemes especialment complexos de la desambiguació
#	- son: pos o vbser o nom
#	- a: vbhaver o prep
#	- an: vbhaver o nom
#	- se: prn.pro.ref o cnjadv
#	- es: det (aran) o vbser
#	- que: enon, rel, cnjsub

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" "<:>";
SOFT-DELIMITERS = "<,>" "<;>";
SUBREADINGS = LTR ; # Alternate, left-to-right (main reading on the left)

LIST BOS = >>> sent ;
LIST EOS = <<< sent ;

#Categorias
LIST V = vblex vbser vbhaver vbmod ;
LIST Ser = vbser ;
LIST Haver = vbhaver ;
LIST Aver = "aver" "auer" ;
LIST VBaux = vbser vbhaver ;
LIST Vmod = vbmod ("voler") ("poder") ("caler") ("faler") ("dever") ("déuer") ("dever") ("soler") ("sòler") ("saber") ("sàber") ;
LIST Conjco = cnjcoo ;
LIST Conjsub = cnjsub ;
LIST Conjadv = cnjadv ;
LIST Enon = enon ;
LIST Rel = rel ;
LIST N = n ;
LIST NP = np ;
LIST AJ = adj ;
LIST N_AJ = n adj ;
LIST AJ_PP = adj pp ;
LIST DET = det ;
LIST NUM = num ;
LIST PREP = pr ;
LIST PRON = prn ;
LIST PERS = pers ;
SET AV = (adv) - (enon) ;
LIST AVexcl = (adv excl) ;
LIST PREAV = preadv ;
LIST PRONPers = (prn p1) (prn p2) (prn p3);
LIST IJ = ij ;
LIST PREDET = predet ;
LIST Pos = pos ;
LIST SENT = sent ;

#Jos=categorias
LIST Tn = tn ;
LIST VBger = ger ;
LIST VBinf = inf ;
LIST VBinfger = inf ger ;
LIST VBimp = imp ;
LIST Pro = pro ;
LIST Ton = tn ;
LIST Ref = ref ;
LIST PRencl = enc ;
LIST VBpp = pp ;
LIST Npl = (n pl);
LIST AJpl = (adj pl);
LIST Ns = (n s);
LIST AJs = (adj s);
LIST Nm = (n m);
LIST AJm = (adj m);
LIST Nf = (n f);
LIST AJf = (adj f);
LIST Vconj = pri prs pii ifi pis imp fti ifi cni ;
LIST Vconj_non_Imp = pri prs pii ifi pis fti ifi cni ;
LIST Vconj_indic = pri pii ifi fti ifi cni ;
LIST PRI = pri ;
LIST PRS = prs ;
LIST Itg = itg ;
LIST DETdef = (det def);
LIST DETind = (det ind);
LIST DETpos = (det pos);

SET Ant = (np ant) ;
SET Cog = (np cog) ;
SET Ant_Cog = Ant OR Cog ;
SET Top = (np top) ;
SET Al = (al) ;
SET Acr = (acr) ;
SET AVG = AV - Enon ;

#Listas
SET intrprop = Conjco OR Itg ; #cnjcoo cnjsub rel itg "," ";" sent adv;
LIST motsdetpl = (det pl) (pr pl);
LIST motsdetsg = (det sg) (pr sg);
LIST motsdetf = (det f) (pr f);
LIST motsdetm = (det m) (pr m);

LIST Masc = m mf ;
LIST Fem = f mf ;
LIST Masc_strict = m ;
LIST Fem_strict = f ;

LIST Sg = sg sp;
LIST Pl = pl sp;
LIST Sg_strict = sg ;
LIST Pl_strict = pl ;

SET MascSg = (m sg) OR (m sp) OR (mf sg) OR (mf sp) ;
SET MascPl = (m pl) OR (m sp) OR (mf pl) OR (mf sp) ;
SET FemSg = (f sg) OR (f sp) OR (mf sg) OR (mf sp) ;
SET FemPl = (f pl) OR (f sp) OR (mf pl) OR (mf sp) ;

SET AcordSN = MascSg OR MascPl OR FemSg OR FemPl ;

SET AcordSP = Sg OR Pl ;

LIST P1 = p1 ;
LIST P2 = p2 ;
LIST P3 = p3 ;
LIST Pers = p1 p2 p3 ;

SET Sg1 = (p1 sg) OR (p1 m sg) OR (p1 f sg) OR (p1 mf sg) ;
SET Sg2 = (p2 sg) OR (p2 m sg) OR (p2 f sg) OR (p2 mf sg) ;
SET Sg3 = (p3 sg) OR (p3 m sg) OR (p3 f sg) OR (p3 mf sg) ;
SET Pl1 = (p1 pl) OR (p1 m pl) OR (p1 f pl) OR (p1 mf pl) ;
SET Pl2 = (p2 pl) OR (p2 m pl) OR (p2 f pl) OR (p2 mf pl) ;
SET Pl3 = (p3 pl) OR (p3 m pl) OR (p3 f pl) OR (p3 mf pl) ;
LIST VSg1 = (vblex p1 sg) (vbser p1 sg) (vbhaver p1 sg) (vbmod p1 sg) ;
LIST VSg2 = (vblex p2 sg) (vbser p2 sg) (vbhaver p2 sg) (vbmod p2 sg) ;
LIST VSg3 = (vblex p3 sg) (vbser p3 sg) (vbhaver p3 sg) (vbmod p3 sg) ;
LIST VPl1 = (vblex p1 pl) (vbser p1 pl) (vbhaver p1 pl) (vbmod p1 pl) ;
LIST VPl2 = (vblex p2 pl) (vbser p2 pl) (vbhaver p2 pl) (vbmod p2 pl) ;
LIST VPl3 = (vblex p3 pl) (vbser p3 pl) (vbhaver p3 pl) (vbmod p3 pl) ;

SET AcordSV = Sg1 OR Sg2 OR Sg3 OR Pl1 OR Pl2 OR Pl3 ;

SET CM = (cm) OR (lpar) OR (rpar) OR ("<;>") ;
LIST Lpar = lpar ;
LIST Rpar = rpar ;
LIST Excl = "!" ;

SET Cnj_Rel_End = BOS OR Conjco OR Conjsub OR Conjadv OR Rel OR VBinf ;


LIST unknown = ("\\*.*"r) ;
LIST unknownMajIni = ("\\*[A-ZÀÁÈÉíÒÓÚÜÇ].*"r) ;
LIST MajIni = ("\\<[A-ZÀÁÄÂÈÉËÊÍÏÎÒÓÖÔÚÜÛÇ].*\\>"r) ;
LIST Majusc = ("\\<[A-ZÉÈÊ][A-ZÂÉÈÊÎÔÛ]*>"r) ;
LIST MinIni = ("\\<[a-zàáäâèéëêíïîòóöôúüûç].*\\>"r) ;
LIST siecles_nom_romains = ("[IVX][IVX]*"r) ;
LIST NumOrd = ("[1-9][0-9]en"r) ("[1-9][0-9]au"r) ;


#Mots
LIST A = "a";
LIST En = "en";
LIST De = "de";
LIST En_pron = ("en" prn);
LIST Dins = "dins";
LIST Pendent = "pendent";
LIST Un = "un" ;
LIST An = "an" ;
LIST Eth = "<eth>i" ;
LIST Nostre = "nòstre" "nòste" ;
LIST Vostre = "vòstre" "vòste" ;
LIST Pas = "pas" ;
LIST AV_Pas_Neg = "pas" "jamai" "jamei" "jamèi" "jamès" "jamés" "jamai pus" "mei jamei" "tanpauc" "tampòc" "tanpòc" "aintanpauc" "atanpauc" "enlòc" "enluòc" "ges" "cap" "briga" "brica" "veta" "gota" "cap mai" "cap mei" "cap pus" "cap mès" "nullament" "aucunament" "alcunament" "degunament" "gaire" "guaire" ;
LIST PRON_Pas_Neg = "cap" "nat" "minga" "narma" "degun" "arrés" "arrís" "digun" "digús" "persona" "res" "arren" "arrens" "ren" "res pus" ;
LIST DET_Pas_Neg = "cap" "cap de" "nat" "brica de" "briga de" "ges de" ;
LIST Cap = ("<cap>"i) ;
LIST Cap_de = ("<cap de>"i) ("<cap d'>"i) ("<cap d’>"i) ;
LIST Cap_de_del = ("<cap de>"i) ("<cap d'>"i) ("<cap d’>"i) ("<cap del>"i) ("<cap dels>"i) ("<cap deu>"i) ("<cap deus>"i) ;
LIST A_de = ("<a de>"i) ("<a d'>"i) ("<a d’>"i) ;
LIST Mai = ("mai" adv) ("mei" adv) ("mès" adv) ("mes" adv) ;
LIST Pus = ("pus" adv) ;
LIST Mens = "mens" "mensh" ;
LIST AdvComp = ("mai" adv) ("mei" adv) ("mès" adv) ("mes" adv) ("pus" adv) "mens" "mensh" ;
LIST Res = "res" "arren" "arrens" "ren" ;
LIST Pel = "pel" "peu" ;
LIST Deu = "deu" ;
LIST Que = "que" ("<que>"i) ;
LIST Qui = "qui" ;
LIST Que_Itg = ("qué" itg) ;
LIST Se = "se" ;
LIST Las = "las" ;
LIST Mas_cnjcoo = "mas" "mes" ;
LIST Estat = "estat" ;
LIST Volar = "volar" ;
LIST Voler = "voler" ;
LIST Seire = "sèire" ;
LIST Saber = "saber" "sàber" ;
List Artcontrpl = "<als>" "<aus>" "<aths>" "<as>" "<dels>" "<deus>" "<dals>" "<deths>" "<des>" "<suls>" "<suus>" "<taus>" "<taths>" "<entaus>" "<entaths>" "<entàs>" "<pels>" "<peus>" "<peths>" "<preus>" "<vèls>" "<jols>" "<enquiaths>" "<ens>" "<enes>" "<endeus>" "<dambeus>" ;
List Artcontrsg = "<al>" "<au>" "<ath>" "<del>" "<deu>" "<dal>" "<deth>" "<sul>" "<suu>" "<tau>" "<tath>" "<entau>" "<entath>" "<pel>" "<peu>" "<peth>" "<preu>" "<vèl>" "<jol>" "<enquiath>" "<en>" "<ene>" "<endeu>" "<dambeu>" ;
LIST Jorns = "diluns" "dimars" "dimècres" "dimèrcs" "dijòus" "dijaus" "divés" "divendres" "dissabte" "dimenge" ;

List Nummois = "1" "1èr" "1ièr" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31" "<purmèr>" "<prumèr>" "<prumièr>" "<primièr>" "<primèr>" "<dos>" "<dus>" "<tres>" "<quatre>" "<quate>" "<cinc>" "<sièis>" "<sèis>" "<sies>" "<siés>" "<siès>" "<sheis>" "<sèt>" "<uèit>" "<ueit>" "<uòch>" "<uèch>" "<nòu>" "<nau>" "<dètz>" "<onze>" "<dotze>" "<tretze>" "<catòrze>" "<catorze>" "<quatòrze>" "<quatorze>" "<quinze>" "<setze>" "<dètz-e-sèt>" "<dètz-e-uèit>" "<dètz-e-ueit>" "<dètz-e-uèch>" "<dètz-e-uòch>" "<dètz-e-nòu>" "<dètz-e-nau>" "<vint>" "<vingt>" "<vint-e-un>" "<vingt-e-un>" "<vint-e-dos>" "<vint-e-dus>" "<vingt-e-dos>" "<vingt-e-dus>"  "<vint-e-tres>" "<vingt-e-tres>" "<vint-e-quatre>" "<vingt-e-quatre>" "<vint-e-quate>" "<vingt-e-quate>" "<vint-e-cinc>" "<vingt-e-cinc>" "<vint-e-sèis>" "<vingt-e-sèis>" "<vint-e-sièis>" "<vingt-e-sièis>" "<vint-e-sies>" "<vingt-e-sies>" "<vint-e-siès>" "<vingt-e-siès>" "<vint-e-siés>" "<vingt-e-siés>" "<vint-e-sheis>" "<vingt-e-sheis>" "<vint-e-sèt>" "<vingt-e-sèt>" "<vint-e-uèit>" "<vingt-e-uèit>" "<vint-e-ueit>" "<vingt-e-ueit>" "<vint-e-uèch>" "<vingt-e-uèch>" "<vint-e-uòch>" "<vingt-e-uòch>" "<vint-e-nòu>" "<vingt-e-nòu>" "<vint-e-nau>" "<vingt-e-nau>" "<trenta>" "<trenta-e-un>" "<trenta-un>" "<dètz e uèch>" "<dètz e uòch>" "<dètz e nòu>" "<dètz e nau>" "<vingt>" "<vint e un>" "<vingt e un>" "<vint e dos>" "<vint e dus>" "<vingt e dos>" "<vingt e dus>"  "<vint e tres>" "<vingt e tres>" "<vint e quatre>" "<vingt e quatre>" "<vint e quate>" "<vingt e quate>" "<vint e cinc>" "<vingt e cinc>" "<vint e sèis>" "<vingt e sèis>" "<vint e sièis>" "<vingt e sièis>" "<vint e sies>" "<vingt e sies>" "<vint e siès>" "<vingt e siès>" "<vint e siés>" "<vingt e siés>" "<vint e sheis>" "<vingt e sheis>" "<vint e sèt>" "<vingt e sèt>" "<vint e uèit>" "<vingt e uèit>" "<vint e ueit>" "<vingt e ueit>" "<vint e uèch>" "<vingt e uèch>" "<vint e uòch>" "<vingt e uòch>" "<vint e nòu>" "<vingt e nòu>" "<vint e nau>" "<vingt e nau>" "<trenta>" "<trenta e un>" "<trenta un>" ;

SET AdjOrd = ("primièr") OR ("primèr") OR  ("prumièr") OR ("prumèr") OR ("purmèr")
OR ("segond") OR ("dusau")
OR ("tresen") OR ("tresau")
OR ("quatren") OR ("quatrau")
OR ("cinquen") OR ("cinquau")
OR ("seisen") OR ("sheisau")
OR ("seten") OR ("setau")
OR ("ochen") OR ("ueitau")
OR ("noven") OR ("navau")
OR ("desen") OR ("detzau")
OR ("onzen") OR ("onzau")
OR ("dotzen") OR ("dotzau")
OR ("tretzen") OR ("tretzau")
OR ("catorzen") OR ("catorzau")
OR ("quinzen") OR ("quinzau")
OR ("setzen") OR ("setzau")
OR ("dètz e seten") OR ("dètz-setau")
OR ("dètz e ochen") OR ("dètz-ueitau")
OR ("dètz e noven") OR ("dètz-navau")
OR ("vinten") OR ("vintau")
OR ("trenten") OR ("trentau")
OR ("quaranten") OR ("quarantau")
OR ("cinquanten") OR ("cinquantau")
OR ("seissanteu") OR ("seishantau")
OR ("setanten") OR ("setantau")
OR ("ochanten") OR ("uietantau")
OR ("nonanten") OR ("navantau")
OR ("centen") OR ("centau")
OR ("milen") OR ("milau")
OR ("milionen") OR ("milionau")
OR ("dernier") OR ("darnièr") OR ("darrièr") OR ("darrèr")
OR NumOrd ;

# adjectifs qui souvent vont devant le nom
SET AdjPre = ("ancian") OR ("nòu") OR ("nau") OR ("novèl") OR ("navèth") OR ("grand") OR ("gran") OR ("petit") OR ("pichon") OR ("pichòt") OR ("bon") OR ("mal") OR ("naut") OR ("haut") OR ("bas") OR ("baish") OR ("autre") OR ("aute") OR ("quite") OR ("quiti") OR AdjOrd;


SET Dignitat = ("papa") OR ("patriarca") OR ("avesque") OR ("arcavesque") OR ("archavesque") OR ("archevesque") OR ("arquevesque") OR ("sant") OR ("sant") OR ("apòstol") OR ("apostòl") OR ("emperador") OR ("emperaire") OR ("rei") OR ("tsar") OR ("vicerei") OR ("regent") OR ("prince") OR ("infant") OR ("dalfin") OR ("comte") OR ("comtessa") OR ("vescomte") OR ("vescomtessa") OR ("duc") OR ("grand-duc") OR ("arcaduc") OR ("archiduc") OR ("marqués") OR ("baron") ;

SET Lenga = ("occitan") OR ("francés") OR ("anglés") OR ("alemand") OR ("espanhòl") OR ("italian") OR ("rus") OR ("chinés") OR ("japonés") OR ("catalan") OR ("basc") OR ("basco") OR ("breton") OR ("còrse") OR ("arpitan") OR ("francoprovençal") OR ("alsacian") OR ("flamenc") ;

SECTION

REMOVE AV IF (0 ("que")) (NOT 0 Enon) ;	# patch
REMOVE Tn IF (0 ("qui")) ;	# patch
REMOVE Tn IF (0 ("qual")) ;	# patch
REMOVE (mf) IF (0 ("qual")) ;	# patch
REMOVE N IF (0 ("<a>"i)) (NOT 1 (")")) ;		# patch
SELECT PREP IF (0 ("<per>"i)) ;		# patch
SELECT PREP IF (0 ("<pel>"i)) (1 N + MascSg) ;		# patch
SELECT PREP IF (0 ("<pel>"i)) (1 NP + MascSg) ;		# patch
SELECT PREP IF (0 ("<de>"i)) ;		# patch
REMOVE N IF (0 ("<coma>"i)) ;		# patch
REMOVE N IF (0 ("<arren>"i)) ;		# patch
REMOVE V IF (0 ("<arren>"i)) ;		# patch
REMOVE N IF (0 ("<ren>"i)) (1 De) ;		# patch
REMOVE N IF (0 ("<e>"i)) ;		# patch
REMOVE N IF (0 ("<o>"i)) ;		# patch
REMOVE N IF (NOT -1/* DET) (0 ("<res>"i)) ;		# patch
REMOVE N IF (NOT -1/* DET) (0 ("<tròp>"i)) ;		# patch
REMOVE N IF (0 ("<la>"i)) ;		# patch
REMOVE N IF (0 ("<las>"i)) ;		# patch
SELECT DET IF (0 ("<las>"i)) (1C N_AJ + FemPl) ;		# patch
REMOVE N IF (0 ("una")) ;		# patch
REMOVE N IF (0 ("<si>"i)) ;		# patch
REMOVE N + ("tau") IF (0 ("tau")) ;		# patch
SELECT PREP IF (-1 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (0 ("tau")) ;
SELECT PREP IF (-2 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (-1 AV) (0 ("tau")) ;
SELECT PREP IF (-3 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (-2 AV) (-1 AV) (0 ("tau")) ;
REMOVE SUB:1 DET IF (0 ("<en>"i)) ;		# patch
REMOVE ("taus") IF (-2 DET + MascPl) (-1 N + MascPl) (0 ("taus")) (1 ("com")) ;		# los fèits taus com s’èran passats
REMOVE N IF (NOT -1 DET + MascSg) (0 ("<com>"i)) ;		# patch
SELECT VBinf IF (-1C PREP OR V) (0 ("<far>"i)) ;		# patch
SELECT VBinf IF (-2C PREP OR V) (-1 Pro OR AV) (0 ("<far>"i)) ;		# patch
SELECT VBinf IF (-3C PREP OR V) (-2 Pro OR AV) (-1 Pro OR AV) (0 ("<far>"i)) ;		# patch
SELECT VBinf IF (NOT 0 DET + MascSg) (0 ("<far>"i)) ;		# patch
SELECT V IF (-1 ("<se>"i)) (NOT 0 DET) ;		# se practica # patch
SELECT PRON IF (0 ("<se>"i)) (1 Ser + &&AcordSP) (2 VBpp + &&AcordSP) ;		# se son formats # patch
SELECT Ser + &&AcordSP IF (-1 ("<se>"i)) (0 Ser + &&AcordSP) (1 VBpp + &&AcordSP) ;		# patch
SELECT VBpp + &&AcordSP IF (-2 ("<se>"i)) (-1 Ser + &&AcordSP) (0 VBpp + &&AcordSP) ;		# patch
SELECT PRON IF (0 ("<se>"i)) (1 Ser + &&AcordSP) (2 AV) (3 VBpp + &&AcordSP) ;		# patch
SELECT Ser + &&AcordSP IF (-1 ("<se>"i)) (0 Ser + &&AcordSP) (1 AV) (2 VBpp + &&AcordSP) ;		# patch
SELECT VBpp + &&AcordSP IF (-3 ("<se>"i)) (-2 Ser + &&AcordSP) (-1 AV) (0 VBpp + &&AcordSP) ;		# patch
SELECT PRON IF (0 ("<se>"i)) (1 Ser + &&AcordSP) (2 AV) (3 AV) (4 VBpp + &&AcordSP) ;		# patch
SELECT Ser + &&AcordSP IF (-1 ("<se>"i)) (0 Ser + &&AcordSP) (1 AV) (2 AV) (3 VBpp + &&AcordSP) ;		# patch
SELECT VBpp + &&AcordSP IF (-4 ("<se>"i)) (-3 Ser + &&AcordSP) (-2 AV) (-1 AV) (0 VBpp + &&AcordSP) ;		# patch
SELECT V IF (0 ("<son>"i)) (1 ("<pas>"i)) ;		# patch
SELECT N IF (-1 DET + MascSg) (0 ("<pas>"i)) ;		# un pas # patch
SELECT DET + MascSg IF (0 DET + MascSg) (1 ("<pas>"i)) ;		# un pas # patch
SELECT N IF (-2 DET + MascSg) (-1 AJ + MascSg) (0 ("<pas>"i)) ;		# un important pas # patch
SELECT AJ + MascSg IF (-1 DET + MascSg) (0 AJ + MascSg) (1 ("<pas>"i)) ;		# un important pas # patch
SELECT AV IF (-1 V) (0 ("<pas>"i)) ;		# patch
SELECT V IF (1 ("<pas>"i)) ;		# patch
REMOVE ("d'unes") IF (-1C N_AJ) ;
SELECT ("d'unes") + PRON IF (1C Que OR Rel) ;
SELECT ("d'unes") IF (-1C BOS OR Que OR Conjadv OR Rel OR PREP) ;	# patch
SELECT ("d'unes") IF (-1 CM) ;	# patch
SELECT ("d'unes") IF (-2 BOS OR CM) (-1 PREP) ;	# patch
SELECT PREAV IF (0 ("<plan>"i)) (1C AJ OR AV) ;		# patch
REMOVE N IF (-1C V) (0 ("<plan>"i)) ;		# patch
SELECT PREAV IF (-1 Ser + &&AcordSP) (0 ("<plan>"i)) (1 AJ + &&AcordSP) ;		# patch
SELECT PREAV IF (-2 Ser + &&AcordSP) (-1 AV) (0 ("<plan>"i)) (1 AJ + &&AcordSP) ;		# patch
SELECT PREAV IF (-1C N + &&AcordSP) (0 ("<plan>"i)) (1 AJ + &&AcordSP) ;
SELECT PREAV IF (-2C N + &&AcordSP) (-1 AJ + &&AcordSP) (0 ("<plan>"i)) (1 AJ + &&AcordSP) ;
SELECT AJ IF (-1C N + &&AcordSP) (0 ("<plan>"i) + &&AcordSP) ;		# patch
SELECT AV IF (0 ("<mai>"i)) (1 De) ;		# patch
REMOVE N IF (-1C PREP) (0 ("<veire>"i)) ;		# patch
SELECT PREP IF (-1 N OR AJ) (0 ("<de mai>"i)) ;		# patch
REMOVE N IF (NOT -1 ("mes") OR ("jorn") OR ("jornada") OR ("fèsta") OR ("hèsta")) (0 ("<de mai>"i)) ;		# patch
REMOVE N IF (NOT -1 DET + FemSg) (0 ("<èra>"i)) ;		# patch
REMOVE ("sèir") IF (0 ("èsser")) ;	# patch
REMOVE ("poirir") IF (0 ("poder")) ;	# patch
REMOVE ("sabar") IF (0 ("saber")) ;	# patch
SELECT PREAV IF (0 ("tant")) (1 AJ OR VBpp OR AV) (2 ("coma")) ;
SELECT AJ OR VBpp OR AV IF (-1 ("tant")) (0 AJ OR VBpp OR AV) (1 ("coma")) ;
SELECT Conjadv IF (-2 ("tant")) (-1 AJ OR VBpp OR AV) (0 ("coma")) ;
SELECT PREAV IF (0 ("tant")) (1 AJ OR VBpp OR AV) (2 Conjco) (3 AJ OR VBpp OR AV) (4 ("coma")) ;
SELECT AJ OR VBpp OR AV IF (-1 ("tant")) (0 AJ OR VBpp OR AV) (1 Conjco) (2 AJ OR VBpp OR AV) (3 ("coma")) ;
SELECT AJ OR VBpp OR AV IF (-3 ("tant")) (-2 AJ OR VBpp OR AV) (-1 Conjco) (0 AJ OR VBpp OR AV) (1 ("coma")) ;
SELECT Conjadv IF (-4 ("tant")) (-3 AJ OR VBpp OR AV) (-2 Conjco) (-1 AJ OR VBpp OR AV) (0 ("coma")) ;
SELECT PREAV IF (0 ("autant")) (1 AJ OR VBpp OR AV) (2 ("com")) ;
SELECT AJ OR VBpp OR AV IF (-1 ("autant")) (0 AJ OR VBpp OR AV) (1 ("com")) ;
SELECT Conjadv IF (-2 ("autant")) (-1 AJ OR VBpp OR AV) (0 ("com")) ;
SELECT PREAV IF (0 ("autant")) (1 AJ OR VBpp OR AV) (2 Conjco) (3 AJ OR VBpp OR AV) (4 ("com")) ;
SELECT AJ OR VBpp OR AV IF (-1 ("autant")) (0 AJ OR VBpp OR AV) (1 Conjco) (2 AJ OR VBpp OR AV) (3 ("com")) ;
SELECT AJ OR VBpp OR AV IF (-3 ("autant")) (-2 AJ OR VBpp OR AV) (-1 Conjco) (0 AJ OR VBpp OR AV) (1 ("com")) ;
SELECT Conjadv IF (-4 ("autant")) (-3 AJ OR VBpp OR AV) (-2 Conjco) (-1 AJ OR VBpp OR AV) (0 ("com")) ;
SELECT PREAV IF (0 ("tant")) (1 VBpp) (2 De) (3* ("coma") LINK 1 De) ;	# seràn tan preocupats de lors electors-clients coma de bastir
SELECT VBpp IF (-1 ("tant")) (0 VBpp) (1 De) ;
SELECT PREAV IF (0 ("autant")) (1 VBpp) (2 De) (3* ("com") LINK 1 De) ;
SELECT VBpp IF (-1 ("autant")) (0 VBpp) (1 De) ;
SELECT PREP IF (0 ("coma")) (1 ("en")) ;
REMOVE N IF (NOT -1 DET) (0 ("<son>"i)) ;	# patch
REMOVE N IF (NOT -1 DET OR NUM) (0 ("<endavant>"i)) ;	# patch
REMOVE DET + Sg IF (-1 NUM LINK NOT 0 ("1")) (0 ("<son>"i)) ;	# patch
REMOVE Sg IF (NOT -1 DET) (0 ("<son>"i)) (1C Pl_strict) ;	# son conegudas
REMOVE Sg IF (NOT -1 DET) (0 ("<son>"i)) (1 AV OR PREAV) (2C Pl_strict) ;	# son plan conegudas
SELECT PREP IF (0 ("sens")) (1C VBinf OR VBger) ;
SELECT PREP IF (0 ("sens")) (1 Pro) (2C VBinf OR VBger) ;
SELECT PREP IF (0 ("sens")) (1 Pro) (2 Pro) (3C VBinf OR VBger) ;
SELECT N IF (-1 MinIni) (0 ("sap") + MajIni) ;
SELECT N IF (0 ("sap")) (1C V + Pers) ;
SELECT N IF (0 ("sap")) (1C AV) (2C V + Pers) ;
SELECT N + &&AcordSN IF (-2C V + Pers) (-1 DET + &&AcordSN) (0 ("sap") + &&AcordSN) ;
SELECT N + MascPl IF (-2C V + Pers) (-1 De) (0 ("sap") + MascPl) ;
SELECT N + &&AcordSN IF (-1/* DET + &&AcordSN) (0 ("sap") + &&AcordSN) (1 De) ;
REMOVE N + ("sap");
REMOVE ("un tal") IF (0 ("un")) ;
REMOVE V IF (0 ("aqueth")) ;	# patch (aquera, aqueras)
SELECT NUM IF (0 ("set")) (1C N_AJ + Pl) ;

REMOVE ("cosina") IF (-1 DETpos + FemSg) (0 ("<cosina>")) ;
REMOVE ("cosina") IF (0 ("cosin") + FemPl) ;
REMOVE ("cosina") IF (0 ("cosin")) (1* ("paire") OR ("pair") OR ("maire") OR ("mair") OR ("parent") OR ("fraire") OR ("sòr") OR ("cosin") OR ("oncle") OR ("tanta") OR ("nebot") OR ("grand")) ;
REMOVE ("cosina") IF (0 ("cosin")) (-1* ("paire") OR ("pair") OR ("maire") OR ("mair") OR ("parent") OR ("fraire") OR ("sòr") OR ("cosin") OR ("oncle") OR ("tanta") OR ("nebot") OR ("grand")) ;
REMOVE ("cosin") IF (0 ("cosina")) ;

REMOVE ("desen") + N_AJ IF (0 ("desena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("desen") + N IF (0 ("desena") + N + Pl) ;
REMOVE ("desen") + N IF (0 ("desena") + N) (-1 DET + FemSg) (1 De) (2 N) ;
REMOVE ("dotzen") + N_AJ IF (0 ("dotzena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("dotzen") + N IF (0 ("dotzena") + N + Pl) ;
REMOVE ("dotzen") + N IF (0 ("dotzena") + N) (-1 DET + FemSg) (1 De) (2 N) ;
REMOVE ("vinten") + N_AJ IF (0 ("vintena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("vinten") + N IF (0 ("vintena") + N + Pl) ;
REMOVE ("vinten") + N IF (0 ("vintena") + N) (-1 DET + FemSg) (1 De) (2 N) ;
REMOVE ("trenten") + N_AJ IF (0 ("trentena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("trenten") + N IF (0 ("trentena") + N + Pl) ;
REMOVE ("trenten") + N IF (0 ("trentena") + N) (-1 DET + FemSg) (1 De) (2 N) ;
REMOVE ("quaranten") + N_AJ IF (0 ("quarantena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("quaranten") + N IF (0 ("quarantena") + N + Pl) ;
REMOVE ("quaranten") + N IF (0 ("quarantena") + N) ;
REMOVE ("quaranten") + N_AJ IF (0 ("quarantena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("cinquanten") + N IF (0 ("cinquantena") + N + Pl) ;
REMOVE ("cinquanten") + N IF (0 ("cinquantena") + N) (-1 DET + FemSg) (1 De) (2 N) ;
REMOVE ("centen") + N_AJ IF (0 ("centena")) (-1 ("un") OR NUM OR DETind) ;
REMOVE ("centen") + N IF (0 ("centena") + N + Pl) ;
REMOVE ("centen") + N IF (0 ("centena") + N) (-1 DET + FemSg) (1 De) (2 N) ;

REMOVE Ser + Pl IF (0 ("son") + Sg) (1C N_AJ + Sg) ;

SELECT N IF (-1/* DET + MascSg OR ("<del>"i) OR ("<al>"i)) (0 Cap); ;
SELECT N IF (-1/* DET + MascSg OR ("<del>"i) OR ("<al>"i)) (0 Cap_de_del) ;
SELECT N + (mf) IF (-1 ("ex") OR ("<ex>"i)) (0 Cap) ;
SELECT N + (mf) IF (-1 ("ex") OR ("<ex>"i)) (0 Cap_de_del) ;
SELECT N + (mf) IF (-1 ("ex") OR ("<ex>"i)) (0 ("<caps>"i)) ;
SELECT PRON IF (NOT -1/* DET) (0 Cap_de) (1 Tn) ;	# cap d'elas
SELECT PRON IF (NOT -1/* DET OR CM) (0 Cap_de) (1 DET) ;
SELECT PRON IF (NOT -1/* DET OR CM) (0 ("<cap del>"i) OR ("<cap dels>"i)) ;
SELECT PRON IF (-1 EOS OR Conjsub OR Conjadv) (0 Cap) ;
SELECT PRON IF (-2 EOS OR Conjsub) (-1 AV OR Conjadv) (0 Cap) ;
SELECT PRON IF (-1 Pas) (0 Cap) ;	# ai pas cap
SELECT PRON IF (-2 Pas) (-1 VBpp) (0 Cap) ;	# ai agut pas cap
SELECT PRON IF (-3 Pas) (-2 AV) (-1 VBpp) (0 Cap) ;	# ai agut pas totjorn cap
SELECT PRON IF (-3 Vmod) (-2 Pas) (-1 VBinf) (0 Cap) ;	# vòli pas manjar cap
SELECT PRON IF (-4 Vmod) (-3 Pas) (-2 AV OR Pro) (-1 VBinf) (0 Cap) ;	# vòli pas ne manjar cap
SELECT PRON IF (-5 Vmod) (-4 Pas) (-3 AV OR Pro) (-2 AV OR Pro) (-1 VBinf) (0 Cap) ;	# vòli pas li'n dire cap
SELECT N IF (0 Cap) (1 NP OR unknownMajIni) ;	# cap Canaveral
SELECT N + (m) IF (0 Cap) (1 NP OR unknownMajIni) ;	# cap Canaveral
SELECT N + (mf) IF (NOT -1 BOS) (0 Cap_de_del) (1 Estat OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 Cap) (1 De) (2 Estat OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 ("cap")) (1 De) (2 Estat OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 ("cap")) (1 De) (2 DET) (3 Estat OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 Cap_de_del) (1 Al) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 Cap_de_del) (1 Ant_Cog) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 Cap_de_del) (1 Estat OR ("govèrn") OR ("conselh") OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("sindicat") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 Cap_de) (1 DET) (2 Estat OR ("govèrn") OR ("conselh") OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("sindicat") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 ("cap")) (1 De) (2 Estat OR ("govèrn") OR ("conselh") OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("sindicat") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (NOT -1 BOS) (0 ("cap")) (1 De) (2 DET) (3 Estat OR ("govèrn") OR ("conselh") OR ("ministèri") OR ("comission") OR ("partit") OR ("union") OR ("sindicat") OR ("politica") OR ("entrepresa") OR ("enterpresa")) ;
SELECT N + (mf) IF (-1 ("<pel>"i) OR ("<pels>"i)) (0 Cap_de_del) ;
SELECT N + (mf) IF (-1 ("<pel>"i) OR ("<pels>"i)) (0 ("cap")) (1 De) ;
SELECT N + (mf) IF (-2 ("per")) (-1 DET + &&AcordSN) (0 Cap_de_del + &&AcordSN) ;
SELECT N + (mf) IF (-2 ("per")) (-1 DET + &&AcordSN) (0 ("cap") + &&AcordSN) (1 De) ;

REMOVE PREP IF (0 A_de) (NOT 1 N_AJ OR AV OR PREAV) ;	# path
REMOVE PREP IF (0 A_de) (1 AV OR PREAV) (NOT 2 N_AJ) ;	# path
REMOVE PREP IF (0 A_de) (-1 Pro) ;	# path
REMOVE PREP IF (0 A_de) (-1 BOS OR CM) ;	# path

REMOVE AV IF (-1C PREP) (0 Cap) (1C EOS OR CM OR Conjsub OR Conjadv OR Conjco) ;

REMOVE DET IF (0 ("hèra")) ;
SELECT AV IF (0 ("hèra") OR ("plan")) (1 Mai OR Pus OR Mens) ;
SELECT PREAV IF (-1 Ser + &&AcordSP OR Ser + VBinf OR Ser + VBger OR Ser + VBpp) (0 ("hèra")) (1 AJ + &&AcordSP OR VBpp + &&AcordSP) ;
SELECT PREAV IF (-2 Ser + &&AcordSP OR Ser + VBinf OR Ser + VBger OR Ser + VBpp) (-1 AV OR Tn) (0 ("hèra")) (1 AJ + &&AcordSP OR VBpp + &&AcordSP) ;	# estón tots hèra urós
SELECT PREAV IF (-3 Ser + &&AcordSP OR Ser + VBinf OR Ser + VBger OR Ser + VBpp) (-2 AV OR Tn) (-1 AV OR Tn) (0 ("hèra")) (1 AJ + &&AcordSP OR VBpp + &&AcordSP) ;
SELECT AV IF (-1 Ser + &&AcordSP OR Ser + VBinf OR Ser + VBger OR Ser + VBpp) (0 ("plan")) (1 AJ + &&AcordSP OR VBpp + &&AcordSP) ;
SELECT AV IF (-2 Ser + &&AcordSP OR Ser + VBinf OR Ser + VBger OR Ser + VBpp) (-1 AV OR Tn) (0 ("plan")) (1 AJ + &&AcordSP OR VBpp + &&AcordSP) ;
SELECT AV IF (-3 Ser + &&AcordSP OR Ser + VBinf OR Ser + VBger OR Ser + VBpp) (-2 AV OR Tn) (-1 AV OR Tn) (0 ("plan")) (1 AJ + &&AcordSP OR VBpp + &&AcordSP) ;
SELECT PREAV IF (-1 Aver) (0 ("hèra") OR ("plan") OR ("força")) (1 ("besonh") OR ("enveja")) ;
SELECT PREAV IF (-2 Aver) (-1 AV OR Tn) (0 ("hèra") OR ("plan") OR ("força")) (1 ("besonh") OR ("enveja")) ;
SELECT PREAV IF (-3 Aver) (-2 AV OR Tn) (-1 AV OR Tn) (0 ("hèra") OR ("plan") OR ("força")) (1 ("besonh") OR ("enveja")) ;
SELECT PREAV IF (0 ("hèra")) (1 ("plan")) ;
SELECT PREAV IF (0 ("hèra")) (1 AJ OR VBpp OR AV LINK NOT 0 Itg OR Excl) (NOT 1 N OR DET OR Que OR ("com") OR ("coma")) ;
SELECT PREAV IF (0 ("plan")) (1C AJ OR VBpp OR AV LINK NOT 0 Itg OR Excl) (NOT 1 Que OR ("com") OR ("coma")) ;
REMOVE PREAV IF (0 ("hèra") OR ("plan")) (1C DET OR N OR Que OR ("com") OR ("coma")) ;

SELECT AV IF (-1 Pas) (0 Mai OR Pus) ;	# ai pas pus
SELECT AV IF (-2 Pas) (-1 VBpp) (0 Mai OR Pus) ;	# ai agut pas pus
SELECT AV IF (-3 Pas) (-2 AV) (-1 VBpp) (0 Mai OR Pus) ;	# ai agut pas totjorn pus
SELECT AV IF (-2 ("non")) (-1 V) (0 Mai OR Pus) ;	# non pòden mes
SELECT AV IF (-3 ("non")) (-2 Pro) (-1 V) (0 Mai OR Pus) ;	# non li pòden mes
SELECT AV IF (-4 ("non")) (-3 Pro) (-2 Pro) (-1 V) (0 Mai OR Pus) ;	# non li o pòden mes
SELECT AV IF (-3 ("non")) (-2 Haver) (-1 VBpp) (0 Mai OR Pus) ;	# non an podut mes
SELECT AV IF (-4 ("non")) (-3 Pro) (-2 Haver) (-1 VBpp) (0 Mai OR Pus) ;	# non li an podut mes
SELECT AV IF (-5 ("non")) (-4 Pro) (-3 Pro) (-2 Haver) (-1 VBpp) (0 Mai OR Pus) ;	# non li o an podut mes
SELECT AV IF (-3 Vmod) (-2 Pas) (-1 VBinf) (0 Mai OR Pus) ;	# vòli pas manjar pus
SELECT AV IF (-4 Vmod) (-3 Pas) (-2 AV OR Pro) (-1 VBinf) (0 Mai OR Pus) ;	# vòli pas ne manjar pus
SELECT AV IF (-5 Vmod) (-4 Pas) (-3 AV OR Pro) (-2 AV OR Pro) (-1 VBinf) (0 Mai OR Pus) ;	# vòli pas li'n dire pus
SELECT Conjco IF (-1 EOS) (0 Mai) ;
SELECT Conjco IF (-1 CM) (0 Mai) (NOT 1 AJ) ;
SELECT AV IF (-1 Ser + &&AcordSP) (0 Mai) (1 AJ + &&AcordSP) ;	# es mai calme
REMOVE AJ IF (0 AJ) (0 VBpp) (1 ("per")) ;
SELECT AJ OR AV IF (-2 Ser + &&AcordSP) (-1 AV OR PREAV) (0 AJ + &&AcordSP) (NOT 1 AJ + &&AcordSP) ;	# es mai calme
SELECT AJ OR AV IF (-3 Ser + &&AcordSP) (-2 AV) (-1 AV OR PREAV) (0 AJ + &&AcordSP) (NOT 1 AJ + &&AcordSP) ;	# es pas mai calme
SELECT VBpp IF (-2 Ser + &&AcordSP) (-1 AV OR PREAV) (0 VBpp + &&AcordSP) (NOT 0 N + &&AcordSP) ;
SELECT VBpp IF (-3 Ser + &&AcordSP) (-2 AV) (-1 AV OR PREAV) (0 VBpp + &&AcordSP) (NOT 0 N + &&AcordSP) ;
SELECT PREAV IF (-1 Ser + &&AcordSP) (0 AV OR PREAV) (1 AJ + &&AcordSP) ;
SELECT PREAV IF (-2 Ser + &&AcordSP) (-1 AV) (0 AV OR PREAV) (1 AJ + &&AcordSP) ;

REMOVE VBimp IF (NOT 1* Excl) ;		# guess
REMOVE VBimp IF (-1 Ant OR Cog OR unknown) (0 P3) ;
REMOVE VBimp IF (-2 Ant OR Cog OR unknown) (-1 AV OR Pro) (0 P3) ;
REMOVE VBimp IF (-3 Ant OR Cog OR unknown) (-2 AV) (-1 Pro) (0 P3) ;
SELECT VBimp IF (-1 BOS) (1 Excl) ;
SELECT VBimp IF (-1 BOS) (1 AV) (2 Excl) ;
SELECT VBimp IF (-2 BOS) (-1 ("be") OR ("que")) (1 Excl) ;
SELECT VBimp IF (-2 BOS) (-1 ("be") OR ("que")) (1 AV) (2 Excl) ;
REMOVE VBimp IF (-1 BOS) (0 ("un")) ;
SELECT VBimp IF (-1 BOS) (0 P2) (1* Excl) ;		# guess
REMOVE VBimp IF (-2 BOS) (-1 ("be") OR ("que")) (0 ("un")) ;
SELECT VBimp IF (-2 BOS) (-1 ("be") OR ("que")) (0 P2) (1* Excl) ;	# guess

REMOVE VBger IF (NOT -1 ("en") OR ("en bèth") OR Pro OR N_AJ OR CM) ;
REMOVE VBger IF (NOT -2 ("en") OR ("en bèth") OR Pro OR CM) (-1C Pro) ;

#Un pronom proclitic est totjorn davant un vèrb o un autre pronom
REMOVE Pro IF (NOT 1 unknown OR Pro OR V - VBpp OR VBimp) ;
REMOVE DET IF (1C V OR Pro) (NOT 1 VBpp) ;
SELECT V OR Pro IF (-1C Pro) (NOT -1/* V) ;	# i a un ; i aviá un
SELECT V OR Pro IF (-1C/* Pro) (NOT -1/* V) ;	# se'n sap

SELECT PREP (0 ("a")) (1C Pro) ;	# a lo parlar
SELECT PREP (0 ("a")) (1C Top OR Ant OR Cog OR Al) ;	# a Niça
REMOVE PREP (0 ("a")) (-1C Rel OR Conjsub) ;
REMOVE PREP (0 ("a")) (-1C Itg) ;

SELECT Conjsub IF (-1C V) (0 Que) ;	# vòli que
SELECT Conjsub IF (-2C V) (-1 AV) (NOT -1 ("e")) (0 Que) ;	# vòli pas que
SELECT Conjsub IF (-3C V) (-2 AV) (-1 AV) (NOT -1 ("e")) (0 Que) ;	# vòli pas totjorn que
SELECT Conjsub IF (-2 VBaux) (-1 VBpp) (0 Que) ;	# ai pensat que
SELECT Conjsub IF (-3 VBaux) (-2 AV) (-1 VBpp) (NOT -1 ("e")) (0 Que) ;	# ai pas pensat que
SELECT Conjsub IF (-4 VBaux) (-3 AV) (-2 AV) (-1 VBpp) (NOT -1 ("e")) (0 Que) ;	# ai pas totjorn pensat que
SELECT Conjsub IF (-2C Ser) (-1 AJ OR ("vertat")) (0 Que) ;	# es vertat que
SELECT Conjsub IF (-3C Ser) (-2 AV) (-1 AJ OR ("vertat")) (0 Que) ;	# es pas vertat que
SELECT Conjsub IF (-4C Ser) (-3 AV) (-2 AV OR PREAV) (-1 AJ OR ("vertat")) (0 Que) ;	# es pas totjorn vertat que
REMOVE Conjsub IF (-1C N_AJ) (0 Que) ;
SELECT AV IF (0 AdvComp) (1 AJ OR VBpp OR AV) (2 Que) ;	# mei leugèr que jo
SELECT AV IF (-1 DETdef + &&AcordSN) (0 AdvComp) (1 AJ + &&AcordSN OR VBpp + &&AcordSN OR N + &&AcordSN) ;	# lo mai rapide
SELECT AV IF (-1 DETdef) (0 AdvComp) (1 AV) ;
SELECT AJ OR VBpp OR AV IF (-1 AdvComp) (0 AJ OR VBpp OR AV) (1 Que) ;	# mei leugèr que jo
SELECT AJ OR AV IF (-1 AdvComp) (0 AJ OR VBpp OR AV) (1 Que) ;	# mei leugèr que jo
SELECT Conjsub IF (-2 AdvComp) (-1 AJ OR VBpp OR AV) (0 Que) ;	# mei leugèr que jo
SELECT Itg IF (0 Que) (1 Ser) (2 ("?")) ;
SELECT Itg IF (0 Que) (1 Ser) (2 ("aquò") OR ("çò")) (1* ("?")) ;
SELECT Rel IF (-1 ("aquò") OR ("çò")) (0 Que) ;
SELECT Rel IF (-1 ("aquò") OR ("çò")) (0 Qui) ;
REMOVE Itg IF (-1C N_AJ) (0 Que) ;
REMOVE Itg IF (-1C ("voler")) (0 Que) ;
REMOVE Itg IF (-1C Saber) (0 Que) ;	# patch
REMOVE Itg IF (-1C ("pensar")) (0 Que) ;	# patch
REMOVE Itg IF (-1C ("creire") OR ("créder") OR ("créser") OR ("creir")) (0 Que) ;	# patch
REMOVE Itg IF (-1C ("diser") OR ("díder")) (0 Que) ;	# patch
REMOVE Itg IF (-1C ("reconéisser") OR ("reconéisher")) (0 Que) ;	# patch
REMOVE Conjsub IF (-1 CM) (0 Que) ;
REMOVE Conjsub IF (-1 DET) (0 Que) ;
REMOVE Conjsub IF (-1C N) (0 Que) ;
REMOVE Conjsub IF (-2C N) (-1 AJ) (0 Que) ;
REMOVE Conjsub IF (-3 N) (-2 AV OR PREAV) (-1 AJ) (0 Que) ;
REMOVE AVG IF (NOT -1 ("pas") OR ("solament")) (0 Que) ;

REMOVE Que_Itg IF (NOT -1 BOS OR CM OR PREP OR Conjadv OR Vconj OR VBinf OR VBger) ;
REMOVE Que_Itg IF (-1 CM) (NOT 1* ("?")) ;
REMOVE Que_Itg IF (-1C N_AJ OR VBpp OR NP) ;
REMOVE Que_Itg IF (-2C N_AJ OR VBpp OR NP) (-1 CM) ;
REMOVE Que_Itg IF (-2C N_AJ OR VBpp OR NP) (-1 PREP) ;
REMOVE Que_Itg IF (-3C N_AJ OR VBpp OR NP) (-2 CM) (-1 PREP) ;
SELECT Rel OR Enon IF (-1C N_AJ OR NP) (0 Que OR Qui) (1 Vconj + P3) ;
SELECT Rel OR Enon IF (-2C N_AJ OR NP) (-1 CM) (0 Que OR Qui) (1 Vconj + P3) ;
SELECT Rel OR Enon IF (-1C N_AJ OR NP) (0 Que OR Qui) (1 AV) (2 Vconj + P3) ;
SELECT Rel OR Enon IF (-2C N_AJ OR NP) (-1 CM) (0 Que OR Qui) (1 AV) (2 Vconj + P3) ;
SELECT Rel IF (-2C N_AJ OR NP) (-1 PREP) (0 Que OR Qui) (1 Vconj + P3) ;
SELECT Rel IF (-3C N_AJ OR NP) (-2 CM) (-1 PREP) (0 Que OR Qui) (1 Vconj + P3) ;
SELECT Rel IF (-2C N_AJ OR NP) (-1 PREP) (0 Que OR Qui) (1 AV) (2 Vconj + P3) ;
SELECT Rel IF (-3C N_AJ OR NP) (-2 CM) (-1 PREP) (0 Que OR Qui) (1 AV) (2 Vconj + P3) ;

SELECT DET + &&AcordSN IF (0 ("un") + &&AcordSN) (1 N_AJ + &&AcordSN) ;	# guess (cal pels enonciatius)
SELECT DET + &&AcordSN IF (NOT -1 PREP) (0 ("un") + &&AcordSN) (1 Top + &&AcordSN) ;	# guess (cal pels enonciatius)
REMOVE V IF (0 ("un")) (1 Que OR Qui) ;

SELECT ("be") + Enon IF (-1 BOS) ;
SELECT ("be") + Enon IF (-3 BOS) (-2 AV OR Conjadv) (-1 CM) ;
SELECT ("que") + Enon IF (-1 BOS) ;
SELECT ("que") + Enon IF (-3 BOS) (-2 AV OR Conjadv) (-1 CM) ;
REMOVE ("e") + Enon IF (NOT 1* ("?")) ;
REMOVE ("be") + Enon IF (NOT 1* ("!")) ;
REMOVE ("que") + Enon IF (-1C DET) ;
REMOVE ("que") + Enon IF (-1 ("solide")) ;
SELECT ("que") + Conjsub IF (-1 ("mei")) ;
SELECT ("que") + Conjsub IF (-2 ("mei")) (-1 AJ OR AJ) ;
SELECT ("que") + Enon OR ("be") + Enon OR ("non") + Enon IF (NOT -1* V + Pers) (1C Pro OR V + Pers LINK NOT 0 VBimp) (NOT 2* V + Pers) (NOT 2* ("?")) ;
REMOVE ("que") + Enon IF (NOT -1* V + Pers) (2* ("?") OR ("!")) ;
REMOVE ("que") + Enon IF (-1C V + Pers OR VBinf OR VBger) ;
REMOVE ("que") + Enon IF (-1 AV) (-2C V + Pers OR VBinf OR VBger) ;
REMOVE ("que") + Enon IF (-1C N_AJ OR VBpp OR NP OR unknownMajIni) (NOT 1 Pro) (2*C V + Pers OR VBinf OR VBger) ;	# los amics que son bons (enon) ; los amics que son bons que son bons (que1 = rel, que 2 = enon)
REMOVE ("que") + Enon IF (-1C N_AJ OR VBpp OR NP OR unknownMajIni) (1 Pro) (NOT 2 Pro) (3*C V + Pers OR VBinf OR VBger) ;
REMOVE ("que") + Enon IF (-1C N_AJ OR VBpp OR NP OR unknownMajIni) (1 Pro) (2 Pro) (4*C V + Pers OR VBinf OR VBger) ;
REMOVE ("que") + Enon IF (-2C N_AJ OR VBpp OR NP OR unknownMajIni) (-1 CM) (NOT 2 Pro) (3*C V + Pers OR VBinf OR VBger) ;
REMOVE ("que") + Enon IF (-2C N_AJ OR VBpp OR NP OR unknownMajIni) (-1 CM) (2 Pro) (NOT 3 Pro) (4*C V + Pers OR VBinf OR VBger) ;
REMOVE ("que") + Enon IF (-2C N_AJ OR VBpp OR NP OR unknownMajIni) (-1 CM) (2 Pro) (3 Pro) (5*C V + Pers OR VBinf OR VBger) ;
REMOVE ("non") + Enon IF (NOT 1* ("pas")) ;
SELECT ("non") + Enon IF (1C Pro OR V + Pers LINK NOT 0 VBimp) ;
SELECT SUB:1 ("non") + Enon IF (1C Pro OR V + Pers LINK NOT 0 VBimp) ;
SELECT ("non") + Enon IF (1 Pro OR V + Pers) (NOT -1 DET + MascSg) ;
SELECT ("non") + Enon IF (1 Pro OR V + Pers) (-1 ("<nat>"i)) ;
SELECT PRON IF (0 ("<nat>"i)) (1 ("<non>"i)) ;
REMOVE ("ne") + Enon IF (NOT 1* ("pas")) ;
SELECT ("ne") + Enon IF (1 V) (2 ("pas")) ;
SELECT ("ne") + Enon IF (1 V) (2 ("que")) ;
SELECT ("ne") + Enon IF (1 V) (2 AV + AV_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (2 PRON + PRON_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (2 AV) (3 ("pas")) ;
SELECT ("ne") + Enon IF (1 V) (2 AV) (3 ("que")) ;
SELECT ("ne") + Enon IF (1 V) (2 AV) (3 AV + AV_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (2 AV) (3 PRON + PRON_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (1* PRON + PRON_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (-1* PRON + PRON_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (1* DET + DET_Pas_Neg) ;
SELECT ("ne") + Enon IF (1 V) (-1* DET + DET_Pas_Neg) ;
REMOVE ("ne") + Enon ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (1C Pro OR V + Pers LINK NOT 0 VBimp) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("ne") OR ("non")) (1 V + Pers LINK NOT 0 VBimp) (2 ("pas") OR ("pas nat")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("ne") OR ("non")) (1 Pro) (2 V + Pers LINK NOT 0 VBimp) (3 ("pas") OR ("pas nat")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("ne") OR ("non")) (1 Pro) (2 Pro) (3 V + Pers LINK NOT 0 VBimp) (4 ("pas") OR ("pas nat")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("be")) (1 V + Pers LINK NOT 0 VBimp) (2* ("!")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("be")) (1 Pro) (2 V + Pers LINK NOT 0 VBimp) (3* ("!")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("be")) (1 Pro) (2 Pro) (3 V + Pers LINK NOT 0 VBimp) (4* ("!")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("e")) (1 V + Pers LINK NOT 0 VBimp) (2* ("?")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("e")) (1 Pro) (2 V + Pers LINK NOT 0 VBimp) (3* ("?")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon BARRIER V) (0 ("e")) (1 Pro) (2 Pro) (3 V + Pers LINK NOT 0 VBimp) (4* ("?")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon OR V) (0 ("que")) (1 V + Pers LINK NOT 0 VBimp) (NOT 2* ("?") OR ("!")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon OR V) (0 ("que")) (1 Pro) (2 V + Pers LINK NOT 0 VBimp) (NOT 3* ("?") OR ("!")) ;
SELECT Enon IF (NOT -1* Conjadv OR Conjsub OR Rel OR Itg OR Enon OR V) (0 ("que")) (1 Pro) (2 Pro) (3 V + Pers LINK NOT 0 VBimp) (NOT 4* ("?") OR ("!")) ;
REMOVE Enon IF (-1C Enon) ;
REMOVE Enon IF (-1 Enon) ;

SELECT IJ IF (-1 BOS) (0 N) (1 CM) (1* ("!")) ;
SELECT IJ IF (-1 BOS OR CM) (1 ("!")) ;
SELECT IJ IF (-1 BOS OR CM) (0 ("gràcies") OR ("de res")) ;			# COPY-PASTE
REMOVE IJ IF (NOT -1 CM OR BOS) (NOT 1 CM OR EOS) (NOT 1* ("!")) ;
REMOVE IJ IF (NOT -1 CM OR BOS) (NOT 1 CM OR EOS) (0 ("a")) ;
REMOVE IJ IF (NOT -1 CM OR BOS) (0 ("plan")) ;
REMOVE IJ IF (NOT -1 CM OR BOS) (0 ("las")) ;
REMOVE AJ (0 ("las")) (1 V OR Pro) ;
SELECT Pro (0 ("las")) (1C V OR Pro) ;
SELECT DET (-1 PREP) (0 ("las")) (1 De) ;

SELECT AVexcl IF (-1 BOS) (0 AVexcl) (1 ("!")) ;
SELECT AVexcl IF (-2 BOS) (-1 Conjco) (0 AVexcl) (1 ("!")) ;
REMOVE AVexcl ;

SELECT Itg IF (-1 BOS) (0C Itg OR Rel OR Conjsub OR Conjadv) ;	# Qui s'adresse
SELECT Itg IF (-2 BOS) (-1 PREP) (0C Itg OR Rel OR Conjsub OR Conjadv) ;	# A qui s'adresse
SELECT Itg IF (-2 BOS) (-1 Conjco) (0C Itg OR Rel OR Conjsub OR Conjadv) ;	# Mais qui s'adresse
SELECT Itg IF (-3 BOS) (-1 Conjco) (-1 PREP) (0C Itg OR Rel OR Conjsub OR Conjadv) ;	# Mais a qui s'adresse
SELECT Itg IF (-1C V LINK NOT 0 VBpp) (0C Itg OR Rel) ;	# je me demande qui
SELECT Itg IF (-2C V LINK NOT 0 VBpp) (-1 PREP) (0C Itg OR Rel) ;	# je demande avec qui
SELECT Itg IF (-2C V LINK NOT 0 VBpp) (-1 AV) (0C Itg OR Rel) ;	# je ne demande pas qui
SELECT Itg IF (-3C V LINK NOT 0 VBpp) (-2 AV) (-1 PREP) (0C Itg OR Rel) ;	# je ne demande pas avec qui
REMOVE AV + Itg ;

SELECT AV IF (0 ("fòrça")) (1 ("present")) ;	# son fòrça presents
SELECT AV IF (-1C Ser OR ("<son>"i)) (0 ("fòrça")) (1C AJ) ;	# son fòrça presents
SELECT AJ IF (-1C Ser) (0 ("present")) ;
SELECT AJ IF (-2C Ser) (-1 AV) (0 ("present")) ;

REMOVE N IF (NOT -1 DET + Masc) (0 ("nos")) (1 Vconj OR VBinf OR VBger OR unknown) ;

REMOVE Tn IF (NOT -1 Tn) (0 ("vos")) (1 Vconj) ;

# voler e volar (p.ex. vòli)
SELECT Voler IF (0 Voler) (0 Volar) (1/* VBinf) ;
SELECT Voler IF (0 Voler) (0 Volar) (1 VBinf) ;
SELECT Voler IF (0 Voler) (0 Volar) (1 AV) (2 VBinf) ;
SELECT Voler IF (0 Voler) (0 Volar) (1 AV) (2 AV) (3 VBinf) ;
SELECT Voler IF (0 Voler) (0 Volar) (-1 (prn pro)) ;
SELECT Volar IF (0 Voler) (0 Volar) (1 ("a") OR ("cap a") OR ("al dessús de") OR ("au dessús de")) ;
SELECT Volar IF (0 Voler) (0 Volar) (1 AV) (2 ("a") OR ("cap a") OR ("al dessús de") OR ("au dessús de")) ;
SELECT Volar IF (0 Voler) (0 Volar) (1 AV) (2 AV) (3 ("a") OR ("cap a") OR ("al dessús de") OR ("au dessús de")) ;
SELECT Volar IF (0 Voler) (0 Volar) (1 De) (2 Top OR unknownMajIni) ;
SELECT Volar IF (0 Voler) (0 Volar) (1 AV) (2 De) (3 Top OR unknownMajIni) ;
SELECT Volar IF (0 Voler) (0 Volar) (1 AV) (2 AV) (3 De) (4 Top OR unknownMajIni) ;
SELECT Voler IF (0 Voler) (0 Volar) (1 De) (2 N_AJ OR unknown) ; 			# partitiu lengadocian
SELECT Voler IF (0 Voler) (0 Volar) (1 De) (2 AV) (3 N_AJ OR unknown) ; 		# partitiu lengadocian
SELECT Voler IF (0 Voler) (0 Volar) (1 De) (2 AV) (3 AV) (4 N_AJ OR unknown) ; 		# partitiu lengadocian
SELECT Voler IF (0 Voler) (0 Volar) (1 N_AJ OR NP OR unknown) ; 		# pas de partitiu en gascon
SELECT Voler IF (0 Voler) (0 Volar) (1 AV) (2 N_AJ OR NP OR unknown) ; 		# pas de partitiu en gascon
SELECT Voler IF (0 Voler) (0 Volar) (1 AV) (2 AV) (3 N_AJ OR NP OR unknown) ; 	# pas de partitiu en gascon
SELECT Voler IF (0 Voler) (0 Volar) (1 ("que")) ;
SELECT Voler IF (0 Voler) (0 Volar) (1 AV) (2 ("que")) ;
SELECT Voler IF (0 Voler) (0 Volar) (1 AV) (2 AV) (3 ("que")) ;
SELECT Voler IF (0 Voler) (0 Volar) (-1 ("què")) (NOT -2 ("en"));

# sèire e saber/sàber (p. ex. "sèi")
SELECT Saber IF (0 Seire) (0 Saber) (1C Itg) ;
SELECT Saber IF (0 Seire) (0 Saber) (1 AV) (2C Itg) ;
SELECT Saber IF (0 Seire) (0 Saber) (1 AV) (2 AV) (3C Itg) ;
SELECT Saber IF (0 Seire) (0 Saber) (1C Que OR Se OR ("çò")) ;
SELECT Saber IF (0 Seire) (0 Saber) (1 AV) (2C Que OR Se OR ("çò")) ;
SELECT Saber IF (0 Seire) (0 Saber) (1 AV) (2 AV) (3C Que OR Se OR ("çò")) ;
SELECT Saber IF (0 Seire) (0 Saber) ;	# patch

SELECT NUM IF (-1 ("en")) (0 ("dos")) ;
SELECT PREP IF (0 ("en")) (1 ("dos")) ;

SELECT V IF (0 ("tornar")) (1C VBinf) ;

SELECT N IF (-1 De) (0 ("òc")) ;

#En es pas un pronom s'es abans un gerondiu (amb possibilitat de pronoms entre los dos)
REMOVE En_pron IF (1* VBger BARRIER (*) - Pro) ;

#Una conjonccion o un pronom relatiu se podon pas trobar en debuta de frasa
#REMOVE Conjco IF (-1 BOS OR SENT);		# en realitat, òc
REMOVE Conjco IF (1 EOS);
SELECT Conjco IF (-1 BOS OR SENT) (0 ("<E>")) (NOT 1 CM) (NOT 1* ("?")) ;
SELECT Conjco IF (-1 BOS OR SENT) (0 ("<E>")) (NOT 1 CM OR Pro OR V + Pers) ;
REMOVE Conjsub IF (-1 BOS OR SENT);
REMOVE Rel IF (-1 BOS OR SENT);
REMOVE Rel IF (NOT -1 CM OR N OR NP OR AJ OR VBpp OR PRON OR DET);
REMOVE Rel IF (NOT -2 N OR AJ OR VBpp OR PRON OR DET) (-1 CM) ;
REMOVE Rel IF (-1C DET) (0 ("lo que") OR ("lo qui")) ;
SELECT Rel IF (-1C DET) ;

#Un imperatiu seguis pas una conjonccion, un relatiu o un pronom personal
REMOVE VBimp IF (-1C Enon OR Conjco OR Conjsub OR Rel OR Pers);

REMOVE VBimp IF (NOT 1* Excl) ;
REMOVE VBimp IF (0 P3) ;

SELECT N IF (-1 ("<[a-zàáèéíòóú].*>"r)) (0 ("<Estat>")) ;	# "Estat" (con mayúscula) va precedido de una palabra con minúscula inicial
SELECT N IF (0 ("radio")) (0 (META:/-/r)) (1 ("television")) ;
SELECT PREP IF (0 ("jos")) (0 (META:/-/r)) ;
SELECT N IF (-1C N) (-1 (META:/-/r)) ;
SELECT N IF (0 (META:/-/r)) (1C N) ;

#Un nom pot pas seguir qu'un vèrbe, un adjectiu, un determinant, un numeral, una prepausicion o un pronom (levat los personals)
#(en titolars periodístics, però, es comença sovint per un nom)
# non : Patxi Zabaleta, actualament cap del partit
REMOVE N IF (NOT -1 BOS OR CM OR Conjco OR V OR AJ OR DET OR NUM OR PREP OR PRON - PRONPers) (NOT -1/* ("de")) (NOT -2 CM) ;
REMOVE N IF (-2 N + &&AcordSN) (-1 AJ + &&AcordSN) (0 VBpp + &&AcordSN) ;	# lo ministre canadian encargat

REMOVE AJ IF (-1C Conjsub OR Conjadv OR Rel) ;

#Un predeterminant es pas seguit que per un determinant
REMOVE PREDET IF (NOT 1 DET);
SELECT PREDET + &&AcordSN IF (0 ("qual que siá") + &&AcordSN OR ("qual que siá") + &&AcordSN) (1 DETdef + &&AcordSN) ;

#Los pronoms possessius son totjorn seguits per un nom, un adjectiu, un advèrb o un numeral
REMOVE DETpos IF (NOT 1 N OR AJ OR AV OR NUM OR NP OR unknown);
REMOVE DETpos IF (0 ("son")) (1C NUM) ;		# son doas causas

# L'enonciatiu es totjorn seguit d'un vèrb o d'un proclitic
REMOVE Enon IF (NOT 1 V OR Pro);
REMOVE SUB:1 Enon IF (NOT 1 V OR Pro);

#Una prepausicion es totjorn seguida d'un nom, pronom, adverb, numeral, infinitiu, determinant o adjectiu
REMOVE PREP IF (NOT 1 N OR PRON OR AV OR NUM OR NP OR VBinf OR DET OR AJ) (NOT 0/* PREP + DET) (NOT 0/* PREP + N) ;

#Es pas un vèrbe se, dempuèi lo darrièr vèrbe conjugat, avèm pas agut de novèla proposicion
#REMOVE Vconj IF (NOT -1* intrprop BARRIER Vconj) ;
	# funciona pas: “Es lo primièr còp que vesi aquò”
REMOVE Vconj IF (-1C PREP) (NOT -1 ("<de mai>"i)) ;
REMOVE Vconj IF (-2C PREP) (-1 DET + &&AcordSN) (0 N + &&AcordSN) ;	# per la planta.
SELECT VBinf IF (-1 ("de")) (0C V) ;
SELECT VBinf IF (-1 ("a") + PREP) (0C V) ;
SELECT VBger IF (-1 ("en") + PREP) (0C V) ;
SELECT VBger IF (-1 ("en bèth") + PREP) (0C V) ;
SELECT VBinf IF (-2 ("de")) (-1 Pro) (0C V) ;
SELECT VBinf IF (-2 ("a") + PREP) (-1 Pro) (0C V) ;
SELECT VBger IF (-2 ("en") + PREP) (-1 Pro) (0C V) ;
SELECT VBger IF (-2 ("en bèth") + PREP) (-1 Pro) (0C V) ;
SELECT VBinf IF (-3 ("de")) (-1 Pro) (-1 Pro) (0C V) ;
SELECT VBinf IF (-3 ("a") + PREP) (-2 Pro) (-1 Pro) (0C V) ;
SELECT VBger IF (-3 ("en") + PREP) (-2 Pro) (-1 Pro) (0C V) ;
SELECT VBger IF (-3 ("en bèth") + PREP) (-2 Pro) (-1 Pro) (0C V) ;
REMOVE VBger IF (0 VBinf) (NOT -1 SENT OR ("en") OR ("en bèth")) ;

#Un determinant es pas plural se lo nom/adjectiu que seguis es singular (o masculin feminin...)
REMOVE motsdetpl IF (1C Ns OR AJs);
REMOVE motsdetsg IF (1C Npl OR AJpl);
REMOVE motsdetf IF (1C Nm OR AJm);
REMOVE motsdetm IF (1C Nf OR AJf);

# AN (+ partipici)

SELECT V IF (0 An + MascSg) (1 VBpp + MascSg) ;
  ## aqueste mes an fach
SELECT V IF (0 An + MascSg) (1 Pas) (2 VBpp + MascSg) ;
SELECT V IF (0 An + MascSg) (1C AV) (2 VBpp + MascSg) ;

# NP

SELECT NP IF (NOT -1 BOS) (NOT -1 (META:/—/r)) ;
REMOVE N + Sg IF (-1 BOS) (0 NP) (NOT 1 CM) (1* V OR Ser BARRIER (":") OR EOS) ;	# Fred es mort ; Mair, vòs que’t haci ; Vacas e vetèths qu’arribavan
REMOVE AJ + Sg IF (-1 BOS) (0 NP) (NOT 1 N + Sg) (NOT 1 De) (NOT 1 CM) (NOT 1* ("!")) (1* V OR Ser BARRIER (":") OR EOS) ;	# Fred es mort

SELECT Conjco (-1 BOS) (0 ("Mas")) ;

REMOVE Cog IF (-1 DETdef) (0 Cog) ;
REMOVE Cog IF (-1 DETind) (0 Cog) ;
REMOVE Cog IF (-1 En) (0 Cog) ;
REMOVE Ant IF (-1 DETdef) (0 Ant) ;
REMOVE Ant IF (-1 DETind) (0 Ant) ;
REMOVE Ant IF (-1 En) (0 Ant) ;

SELECT NP IF (0 N OR NP) (1 NP) (0 (META:/-/r)) (NOT 0 ("bas") OR ("naut") OR ("haut")) ;   # Pierre-Michel
SELECT Ant IF (0 Ant) (1C Ant) (0 (META:/-/r)) ;                                # Jean-René
SELECT Ant IF (-1C Ant) (0 Ant) (-1 (META:/-/r)) ;
SELECT Cog IF (0 Cog) (1C Cog) (0 (META:/-/r)) ;
SELECT Cog IF (-1C Cog) (0 Cog) (-1 (META:/-/r)) ;
SELECT Cog IF (0 Cog OR Ant) (-1C Ant) (NOT 1 Cog) ;

SELECT Ant IF (0 MascSg) (1 (<"Ièr">)) ;
SELECT AJ IF (-1 Ant OR MajIni OR unknownMajIni) (0 ("<Ièr>")) ;
SELECT Top IF (-2 Ant) (-1 De) ;                                        # Louis de Lorraine
SELECT Top IF (-3 Ant) (-2 siecles_nom_romains OR ("<Ièr>")) (-1 De) ;  # Louis II de Lorraine
SELECT Ant IF (1 De) (2 Top) ;                                          # Michel de Lorraine
SELECT Ant IF (1 siecles_nom_romains OR ("<Ièr>")) (2 De) (3 Top) ;     # Michel II de Lorraine
SELECT Top IF (-2 ("vila") OR ("estat") OR ("region") OR ("catedrala") OR ("glèisa") OR ("aeropòrt") OR ("pòrt")) (-1 De) ;
SELECT Top IF (-2 ("concili") OR ("parlament") OR ("constitucion") OR ("tractat") OR ("declaracion")) (-1 De) ;
SELECT Top IF (-2 ("universitat")) (-1 De) ;                             # université de Paris VII
SELECT Ant IF (1 siecles_nom_romains OR ("<Ièr>")) ;                    # Michel II
SELECT Top IF (1C Top) (0 (META:/-/r)) ;
SELECT Top IF (-1C Top) (-1 (META:/-/r)) ;

SELECT Ant_Cog IF (0 Cog OR Ant) (1C Cog) ;
SELECT Ant OR Cog IF (0 Ant OR Cog) (1C Ant OR Cog) (0 (META:/-/r)) ;           # Charles-Michel
SELECT Ant OR Cog IF (-1C Ant OR Cog) (0 Ant OR Cog) (-1 (META:/-/r)) ;         # Charles-Michel
SELECT Ant IF (0 Ant) (1C Ant) (0 (META:/-/r)) ;
SELECT Cog IF (0 Cog) (1C Cog) (0 (META:/-/r)) ;
SELECT Ant IF (-1C Ant) (0 Ant) (-1 (META:/-/r)) ;
SELECT Cog IF (-1C Cog) (0 Cog) (-1 (META:/-/r)) ;
SELECT Ant IF (NOT -1 Ant) (0C Ant OR Cog) (1 Cog) (NOT 0 (META:/-/r)) ;        # Albin Michel; Claude Étienne Michel
SELECT Ant IF (0 Ant) (1C Ant OR Cog) (NOT 0 (META:/-/r)) ;
SELECT Cog IF (-1C Ant) (0 Cog) (NOT -1 (META:/-/r)) (NOT 1 Cog OR unknownMajIni) ;
SELECT Masc_strict IF (-2 DETdef + MascSg) (-1 N_AJ + MascSg) (0C Ant) ; # l'empereur Claude
SELECT Fem_strict IF (-2 DETdef + FemSg) (-1 N_AJ + FemSg) (0C Ant) ;    # la belle Claude
SELECT Masc_strict IF (0 Ant + Masc_strict) (1C Ant + Masc_strict) ;
SELECT Fem_strict IF (0 Ant + Fem_strict) (1C Ant + Fem_strict) ;
SELECT Masc_strict IF (-1C Ant + Masc_strict) (0 Ant + Masc_strict) ;
SELECT Fem_strict IF (-1C Ant + Fem_strict) (0 Ant + Fem_strict) ;

SELECT Ant IF (0 ("René") OR ("Renée") OR ("Marc") OR ("Pierre") OR ("Beau")) (1 Ant OR NP OR unknownMajIni) ;
SELECT Masc_strict IF (0 ("Camille")) (1 ("Pissarro")) ;
SELECT Cog IF (-1 ("Édouard")) (0 ("Philippe")) ;
SELECT Ant IF (0 ("Édouard")) (1 ("Philippe")) ;
SELECT Ant IF (0 ("Luther")) (1 Cog OR unknownMajIni) ;
SELECT Cog IF (0 ("Luther")) (NOT 1 Cog OR unknownMajIni) ;

SELECT Fem IF (0 ("Simone")) ;

SELECT Masc_strict IF (0 ("Antigone")) (1 ("le")) (2 ("borgne")) ;
SELECT Masc_strict IF (0 ("Antigone")) (1 ("\\<[IXV]>"r)) ;
SELECT Fem_strict IF (0 ("Antigone")) ;
SELECT Fem_strict IF (0 ("Andromaque")) ;

SELECT Masc_strict IF (0 ("Cassandre")) (1* ("Macédoine") OR ("Roxanne") OR ("Alexandre") OR ("Antipater") OR ("Ptolémée") OR ("rei") + Masc OR ("diadoque")) ;
SELECT Masc_strict IF (0 ("Cassandre")) (-1* ("Macédoine") OR ("Roxanne") OR ("Alexandre") OR ("Antipater") OR ("Ptolémée") OR ("rei") + Masc OR ("diadoque")) ;
SELECT Fem_strict IF (0 ("Cassandre")) ;

SELECT Ant + Masc_strict IF (0 Ant) (1 DETdef + Sg + Masc) (2 N_AJ + Sg + Masc + MajIni) ;
SELECT Ant + Fem_strict IF (0 Ant) (1 DETdef + Sg + Fem) (2 N_AJ + Sg + Fem + MajIni) ;
SELECT Ant + Masc_strict IF (0 Ant) (1 DETdef + Sg + Masc) (2 unknownMajIni) ;
SELECT Ant + Masc_strict IF (0 Ant) (1 siecles_nom_romains OR ("<Ièr>")) ;              # Constance II

REMOVE Ant IF (-1 ("banca")) (NOT 1 Cog OR Ant) ;

SELECT Top IF (-2C Ant) (-1 ("<de>")) (0C Cog OR Ant OR Top) ;
SELECT Ant IF (0C Cog OR Ant OR Top) (1 ("<de>")) (2C Top) ;    # Maurice de Saxe
REMOVE Top IF (0 Cog OR Ant OR Top) (1 unknownMajIni) (NOT -1 ("de")) ;
SELECT Ant IF (NOT -1 Cog OR Ant) (0C Cog OR Ant) (1 unknownMajIni) ; # Léon Verguet
REMOVE (cog) IF (0C NP) (0 (cog)) (0 (top)) (NOT 1 (ant) OR (cog)) (-1 BOS); # Orihuela, Vilallonga

SELECT Ant IF (-1 ("dieu") OR ("divessa")) ;

SELECT Ant IF (-1 (";") OR (":")) (1 Ant OR Cog OR unknownMajIni) ;

SELECT Top IF (-2 ("vila") OR ("aeropòrt") OR ("pòrt") OR ("reialme") OR ("principat") OR ("grand-ducat") OR ("ducat") OR ("marquesat") OR ("comtat") OR ("baroniá") OR ("senhoria") OR ("archavescat") OR ("arquevescat") OR ("avescat")) (-1 ("de")) (0 Cog OR Ant) ;
SELECT Top IF (-2 Dignitat) (-1 ("de")) (0 Top) ;
SELECT Top IF (-2 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (-1 ("a") OR ("de") OR ("cap a") OR ("devèrs") OR ("entà") OR ("tà")) ;
SELECT Top + FemSg IF (-2 ("anar") OR ("viatjar") OR ("arribar") OR ("partir")) (-1 ("en")) ;
SELECT Top IF (-3 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (-2 ("a") OR ("de") OR ("cap a") OR ("devèrs") OR ("entà") OR ("tà")) (-1 DET + &&AcordSN) (0 Top + &&AcordSN) ;
SELECT Top IF (-3 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (-2 AV) (-1 ("a") OR ("de") OR ("cap a") OR ("devèrs") OR ("entà") OR ("tà")) ;
SELECT Top + FemSg IF (-3 ("anar") OR ("viatjar") OR ("arribar") OR ("partir")) (-2 AV) (-1 ("en")) ;
SELECT Top IF (-4 ("anar") OR ("viatjar") OR ("arribar") OR ("partir") OR ("sortir") OR ("gésser")) (-3 AV) (-2 ("a") OR ("de") OR ("cap a") OR ("devèrs") OR ("entà") OR ("tà")) (-1 DET + &&AcordSN) (0 Top + &&AcordSN) ;


REMOVE Al IF (-1 Ant OR Cog) (0 Ant OR Cog) ;
REMOVE Top IF (-1 Ant OR Cog) (0 Ant OR Cog) ;
REMOVE Al IF (0 Ant OR Cog) (1 Ant OR Cog) ;
SELECT Top IF (-1 Lpar) (0 Cog) (1 Rpar);

SELECT Top IF (0 ("Euròpa")) (NOT -1 DET) (NOT -1 Ant_Cog) ;
SELECT Top IF (0 ("Asia")) (NOT -1 DET) (NOT -1 Ant_Cog) ;
SELECT Top IF (0 ("America")) (NOT -1 DET) (NOT -1 Ant_Cog) ;


# HAVER

SELECT Haver IF (0 Haver) (1C VBpp) ;	# a cantat
SELECT Haver IF (0 Haver) (1 Haver + VBpp) ;	# a cantat
SELECT Haver IF (0 Haver) (1 AV) (2 VBpp) ;	# a pas cantat
SELECT Haver IF (0 Haver) (1 AV) (2 AV) (3 VBpp) ;	# a pas totjorn cantat
SELECT Haver IF (-1 Haver) (0 Haver + VBpp) ;	# a agut
SELECT Haver IF (-2 Haver) (-1 AV) (0 Haver + VBpp) ;	# a pas agut
SELECT Haver IF (-3 Haver) (-2 AV) (-1 AV) (0 Haver + VBpp) ;	# a pas totjorn agut

# Ser

SELECT Ser IF (0 Ser + &&AcordSP) (1C VBpp + &&AcordSP) ;	# soi estat
SELECT Ser IF (-1 Pro + P1 + Sg) (0 Ser + P1 + Sg) (1 VBpp + Sg) ;	# me soi banhat
SELECT Ser IF (-1 Pro + P2 + Sg) (0 Ser + P2 + Sg) (1 VBpp + Sg) ;	# t'ès banhat
SELECT Ser IF (-1 Pro + P1 + Pl) (0 Ser + P1 + Pl) (1 VBpp + Pl) ;	# nos sèm banhats
SELECT Ser IF (-1 Pro + P2 + Pl) (0 Ser + P2 + Pl) (1 VBpp + Pl) ;	# vos sètz banhats
SELECT Ser IF (-1 Pro + P3 + Ref) (0 Ser + P3 + Sg) (1 VBpp + Sg) ;	# s'es banhat
SELECT Ser IF (-1 Pro + P3 + Ref) (0 Ser + P3 + Pl) (1 VBpp + Pl) ;	# se son banhats
SELECT Ser IF (0 Ser + &&AcordSP) (1 AV) (2 VBpp + &&AcordSP) ;	# soi pas estat
SELECT Ser IF (0 Ser + &&AcordSP) (1 AV) (2 AV) (3 VBpp + &&AcordSP) ;	# soi pas totjorn estat
SELECT Ser IF (-1 Ser + &&AcordSP) (0 Ser + VBpp + &&AcordSP) (1 VBpp + &&AcordSP) ;	# soi estat apelat
SELECT Ser IF (-2 Ser + &&AcordSP) (-1 AV) (0 Ser + VBpp + &&AcordSP) (1 VBpp + &&AcordSP) ;	# soi pas estat apelat
SELECT Ser IF (-1 Ser + &&AcordSP) (0 Ser + VBpp + &&AcordSP) (-1 AV) (2 VBpp + &&AcordSP) ;	# soi estat immediatament apelat
SELECT Ser IF (-2 Ser + &&AcordSP) (-1 AV) (0 Ser + VBpp + &&AcordSP) (1 AV) (2 VBpp + &&AcordSP) ;	# soi pas estat immediatament apelat
SELECT VBpp IF (-2 Ser + &&AcordSP) (-1 Ser + VBpp + &&AcordSP) (0 VBpp + &&AcordSP) ;	# soi estat apelat
SELECT VBpp IF (-3 Ser + &&AcordSP) (-2 AV) (-1 Ser + VBpp + &&AcordSP) (0 VBpp + &&AcordSP) ;	# soi pas estat apelat
SELECT VBpp IF (-3 Ser + &&AcordSP) (-2 Ser + VBpp + &&AcordSP) (-1 AV) (0 VBpp + &&AcordSP) ;	# soi estat immediatament apelat
SELECT VBpp IF (-4 Ser + &&AcordSP) (-3 AV) (-2 Ser + VBpp + &&AcordSP) (-1 AV) (0 VBpp + &&AcordSP) ;	# soi pas estat immediatament apelat

# VBpp

REMOVE Vconj IF (-1C Haver + Vconj) (0 VBpp) ;	# ajan avut
REMOVE AJ IF (-1C Haver) (0 VBpp) ;	# ai ascotat
REMOVE Vconj IF (-1C Ser + Vconj + &&AcordSP) (0 VBpp + &&AcordSP) ;
REMOVE Vconj IF (-2C Haver + Vconj) (-1 AV) (0 VBpp) ;	# ajan pas avut
REMOVE AJ IF (-2C Haver) (-1 AV) (0 VBpp) ;	# ai pas ascotat
REMOVE Vconj IF (-2C Ser + Vconj + &&AcordSP) (-1 AV) (0 VBpp + &&AcordSP) ;
REMOVE Vconj IF (-3C Haver + Vconj) (-2 AV) (-1 AV) (0 VBpp) ;	# ajan pas totjorn avut
REMOVE AJ IF (-3C Haver) (-2 AV) (-1 AV) (0 VBpp) ;	# ai pas totjorn ascotat
REMOVE Vconj IF (-3C Ser + Vconj + &&AcordSP) (-2 AV) (-1 AV) (0 VBpp + &&AcordSP) ;

# VBinf

SELECT VBinf IF (0 AJ) (1 ("par")) ;
SELECT AV IF (-1 Vmod) (0 ("<tornar>"i)) (1 VBinf) ;	# pòdi tornar manjar
SELECT VBinf IF (-1 Vmod) (0 VBinf) ;	# pòdi manjar
SELECT Vmod IF (0 Vmod) (1C VBinf) (NOT 0 PREP) ;	# pòdi manjar
SELECT VBinf IF (-2 Vmod) (-1 AV OR Pro) (0 VBinf) (NOT 0 PREP) ;	# pòdi pas manjar
SELECT Vmod IF (0 Vmod) (1 AV OR Pro) (2C VBinf) (NOT 0 PREP) ;	# pòdi pas manjar
SELECT VBinf IF (-3 Vmod) (-2 AV OR Pro) (-1 AV OR Pro) (0 VBinf) (NOT 0 PREP) ;	# pòdi pas manjar
SELECT Vmod IF (0 Vmod) (1 AV OR Pro) (2 AV OR Pro) (3C VBinf) (NOT 0 PREP) ;	# pòdi pas manjar

# VBmod

SELECT Vmod IF (0 ("caler")) (1 Que) ;
SELECT Vmod IF (0 ("caler")) (1 AV) (2 Que) ;
SELECT Vmod IF (0 ("caler")) (1 AV) (2 AV) (3 Que) ;
SELECT Vmod IF (0 ("caler")) (-1/* Pro) ;
SELECT Vmod IF (0 ("caler")) (-1 Itg) ;
SELECT Vmod IF (0 ("caler")) (-1 Enon) ;
SELECT Vmod IF (0 ("caler")) (-1 BOS) ;
SELECT Vmod IF (0 ("caler")) (-2 BOS) (1 AV) ;
REMOVE Vmod IF (NOT 1 VBinf OR AV OR Pro OR Que) ;
REMOVE Vmod IF (1 AV) (NOT 2 VBinf OR AV OR Pro OR Que) ;
REMOVE Vmod IF (1 AV) (1 AV) (NOT 3 VBinf OR AV OR Pro OR Que) ;
REMOVE Vmod IF (1 AV) (2 Pro) (NOT 3 VBinf OR Pro) ;
REMOVE Vmod IF (1 Pro) (NOT 2 VBinf OR Pro) ;
REMOVE Vmod IF (1 Pro) (2 Pro) (NOT 2 VBinf) ;

#Vb conjugat après enonciatiu
SELECT Vconj IF (-1C Enon) (NOT 0 Pro) ;

SELECT P1 + Sg IF (-1 PRON + Tn + P1 + Sg) (0 V + P1 + Sg) (NOT -1 DET + &&AcordSN LINK NOT 0 N_AJ + &&AcordSN) ;
SELECT P1 + Sg IF (-2 PRON + Tn + P1 + Sg) (-1 Pro OR AV) (0 V + P1 + Sg) ;
SELECT P1 + Sg IF (-3 PRON + Tn + P1 + Sg) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P1 + Sg) ;
SELECT P1 + Sg IF (-4 PRON + Tn + P1 + Sg) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P1 + Sg) ;
SELECT P2 + Sg IF (-1 PRON + Tn + P2 + Sg) (0 V + P2 + Sg) (NOT -1 DET + &&AcordSN LINK NOT 0 N_AJ + &&AcordSN) ;
SELECT P2 + Sg IF (-2 PRON + Tn + P2 + Sg) (-1 Pro OR AV) (0 V + P2 + Sg) ;
SELECT P2 + Sg IF (-3 PRON + Tn + P2 + Sg) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P2 + Sg) ;
SELECT P2 + Sg IF (-4 PRON + Tn + P2 + Sg) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P2 + Sg) ;
SELECT P3 + Sg IF (-1 PRON + Tn + P3 + Sg LINK NOT 0 ("se")) (0 V + P3 + Sg) (NOT -1 DET + &&AcordSN LINK NOT 0 N_AJ + &&AcordSN) ;
SELECT P3 + Sg IF (-2 PRON + Tn + P3 + Sg LINK NOT 0 ("se")) (-1 Pro OR AV) (0 V + P3 + Sg) ;
SELECT P3 + Sg IF (-3 PRON + Tn + P3 + Sg LINK NOT 0 ("se")) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P3 + Sg) ;
SELECT P3 + Sg IF (-4 PRON + Tn + P3 + Sg LINK NOT 0 ("se")) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P3 + Sg) ;
SELECT P1 + Pl IF (-1 PRON + Tn + P1 + Pl) (0 V + P1 + Pl) (NOT -1 DET + &&AcordSN LINK NOT 0 N_AJ + &&AcordSN) ;
SELECT P1 + Pl IF (-2 PRON + Tn + P1 + Pl) (-1 Pro OR AV) (0 V + P1 + Pl) ;
SELECT P1 + Pl IF (-3 PRON + Tn + P1 + Pl) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P1 + Pl) ;
SELECT P1 + Pl IF (-4 PRON + Tn + P1 + Pl) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P1 + Pl) ;
SELECT P2 + Pl IF (-1 PRON + Tn + P2 + Pl) (0 V + P2 + Pl) (NOT -1 DET + &&AcordSN LINK NOT 0 N_AJ + &&AcordSN) ;
SELECT P2 + Pl IF (-2 PRON + Tn + P2 + Pl) (-1 Pro OR AV) (0 V + P2 + Pl) ;
SELECT P2 + Pl IF (-3 PRON + Tn + P2 + Pl) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P2 + Pl) ;
SELECT P2 + Pl IF (-4 PRON + Tn + P2 + Pl) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P2 + Pl) ;
SELECT P3 + Pl IF (-1 PRON + Tn + P3 + Pl) (0 V + P3 + Pl) (NOT -1 DET + &&AcordSN LINK NOT 0 N_AJ + &&AcordSN) ;
SELECT P3 + Pl IF (-2 PRON + Tn + P3 + Pl) (-1 Pro OR AV) (0 V + P3 + Pl) ;
SELECT P3 + Pl IF (-3 PRON + Tn + P3 + Pl) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P3 + Pl) ;
SELECT P3 + Pl IF (-4 PRON + Tn + P3 + Pl) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P3 + Pl) ;

SELECT Vconj_indic IF (-2 PRON + Tn + P1 + Sg) (-1C Enon) (0 V + P1 + Sg) ;
SELECT Vconj_indic IF (-3 PRON + Tn + P1 + Sg) (-2C Enon) (-1 Pro OR AV) (0 V + P1 + Sg) ;
SELECT Vconj_indic IF (-4 PRON + Tn + P1 + Sg) (-3C Enon) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P1 + Sg) ;
SELECT Vconj_indic IF (-2 PRON + Tn + P2 + Sg) (-1C Enon) (0 V + P2 + Sg) ;
SELECT Vconj_indic IF (-3 PRON + Tn + P2 + Sg) (-2C Enon) (-1 Pro OR AV) (0 V + P2 + Sg) ;
SELECT Vconj_indic IF (-4 PRON + Tn + P2 + Sg) (-3C Enon) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P2 + Sg) ;
SELECT Vconj_indic IF (-2 PRON + Tn + P3 + Sg) (-1C Enon) (0 V + P3 + Sg) ;
SELECT Vconj_indic IF (-3 PRON + Tn + P3 + Sg) (-2C Enon) (-1 Pro OR AV) (0 V + P3 + Sg) ;
SELECT Vconj_indic IF (-4 PRON + Tn + P3 + Sg) (-3C Enon) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P3 + Sg) ;
SELECT Vconj_indic IF (-2 PRON + Tn + P1 + Pl) (-1C Enon) (0 V + P1 + Pl) ;
SELECT Vconj_indic IF (-3 PRON + Tn + P1 + Pl) (-2C Enon) (-1 Pro OR AV) (0 V + P1 + Pl) ;
SELECT Vconj_indic IF (-4 PRON + Tn + P1 + Pl) (-3C Enon) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P1 + Pl) ;
SELECT Vconj_indic IF (-2 PRON + Tn + P2 + Pl) (-1C Enon) (0 V + P2 + Pl) ;
SELECT Vconj_indic IF (-3 PRON + Tn + P2 + Pl) (-2C Enon) (-1 Pro OR AV) (0 V + P2 + Pl) ;
SELECT Vconj_indic IF (-4 PRON + Tn + P2 + Pl) (-3C Enon) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P2 + Pl) ;
SELECT Vconj_indic IF (-2 PRON + Tn + P3 + Pl) (-1C Enon) (0 V + P3 + Pl) ;
SELECT Vconj_indic IF (-3 PRON + Tn + P3 + Pl) (-2C Enon) (-1 Pro OR AV) (0 V + P3 + Pl) ;
SELECT Vconj_indic IF (-4 PRON + Tn + P3 + Pl) (-3C Enon) (-2 Pro OR AV) (-1 Pro OR AV) (0 V + P3 + Pl) ;

# DET

REMOVE ("d'unes") IF (-1C N_AJ) ;	# patch

REMOVE DET IF (-1 DET + &&AcordSN) (0 ("lei") + &&AcordSN) ;
REMOVE DET IF (-1 DET + &&AcordSN) (0 ("leis") + &&AcordSN) ;
REMOVE DET IF (-2 DET + &&AcordSN) (-1 AJ + &&AcordSN) (0 ("lei") + &&AcordSN) ;
REMOVE DET IF (-2 DET + &&AcordSN) (-1 AJ + &&AcordSN) (0 ("leis") + &&AcordSN) ;
SELECT N IF (-1 De) (0 ("lei")) ;	# patch
SELECT N IF (-1 De) (0 ("leis")) ;	# patch

SELECT DET + &&AcordSN IF (1 ("un") + &&AcordSN) (2 Conjco) (3 DET) (4 ("altre") OR ("aute")) ;
SELECT Tn + &&AcordSN IF (-1C DET + &&AcordSN) (0 ("un") + &&AcordSN) ;
REMOVE DET IF (-1C/* DET) ;	# un cèrt estacament
REMOVE DET IF (0 DET) (NOT 1 N OR AJ OR Tn OR NP OR NUM OR AV OR PREAV OR Rel OR unknown) (NOT 0 DETdef LINK 1 De) ;
REMOVE DET + &&AcordSN IF (0 DET) (1 N_AJ OR NP OR Tn) (NOT 1 NUM OR AV OR PREAV OR Rel) (0 DET + &&AcordSN) (NOT 1 N_AJ + &&AcordSN OR NP + &&AcordSN OR Tn + &&AcordSN) ;	# Avèm entrevistat aquesta pendent la Hèsta
REMOVE SUB:1 DET IF (0/* DET) (1C DET) ;	# en los acès
SELECT PREAV IF (0 ("fòrça")) (1C AJ) ;
SELECT AV IF (0 ("fòrça")) (1C VBpp) ;
SELECT AV IF (0 ("fòrça")) (1 AdvComp) ;
SELECT DETind + &&AcordSN IF (0 DETind + &&AcordSN) (1 N + &&AcordSN) ;	# un enfant
SELECT DETind + &&AcordSN IF (0 DETind + &&AcordSN) (1 AJ + &&AcordSN) (NOT 0 ("força") OR ("horça")) ;	# un jaune
REMOVE PRON + Pos IF (0 DETpos + &&AcordSN) (1 N + &&AcordSN) ;	# lo son torn
REMOVE SUB:1 PRON + Pos IF (0/* DETpos + &&AcordSN) (1 N + &&AcordSN) ;	# deu son torn
SELECT N_AJ + &&AcordSN IF (-1 DETind + &&AcordSN) (0 N_AJ + &&AcordSN) ;
SELECT DET IF (0 DETind) (1C V) ;
SELECT DET IF (0 DETind) (1 unknown) ;	# guess
REMOVE ("unir") IF (0 Un) (1C V + Pers OR VBpp) ;	# guess
REMOVE ("unir") IF (0 Un) (1C V + Pers OR VBpp) ;	# guess
REMOVE ("unir") IF (0 Un + &&AcordSN) (1C N_AJ + &&AcordSN) ;	# guess
SELECT PRON IF (0 Un) (1 De) (2 N + Sg) ;
SELECT PRON IF (0 Un + Masc) (1 De) (1/* DET + MascPl) (2 N + MascPl) ;
SELECT PRON IF (0 Un + Fem) (1 De) (2 DET + FemPl) (3 N + FemPl) ;
SELECT PRON IF (0 Un + Masc) (1 De) (1/* DET + MascPl) (2 AJ OR AdvComp) (3 N_AJ + MascPl) ;
SELECT PRON IF (0 Un + Fem) (1 De) (2 DET + FemPl) (2 AJ OR AdvComp) (4 N_AJ + FemPl) ;
REMOVE DET IF (0 Eth) (1 DET);
REMOVE DET IF (0 Eth) (1 Pas);
REMOVE DET IF (1 ("<a>"i));

SELECT DET + &&AcordSN IF (0 DET + &&AcordSN) (1 N_AJ + &&AcordSN) (2 N_AJ + &&AcordSN) (1C N_AJ) (2C N_AJ) ;
SELECT N_AJ + &&AcordSN IF (-1 DET + &&AcordSN) (0 N_AJ + &&AcordSN) (1 N_AJ + &&AcordSN) (0C N_AJ) (1C N_AJ) ;
SELECT N_AJ + &&AcordSN IF (-2 DET + &&AcordSN) (-1 N_AJ + &&AcordSN) (0 N_AJ + &&AcordSN) (-1C N_AJ) (0C N_AJ) ;

REMOVE PRON IF (0 DET + Pos) (1 unknown) ;

SELECT SUB:1 Masc IF (0/* ("lo")) (1 ("díser") OR ("har")) ;	# que'u díser
SELECT SUB:1 Masc IF (0/* ("lo")) (1 Pro) (2 ("díser") OR ("har")) ;	# que'u te díser

SELECT VBpp IF (-1 ("un còp")) ;
SELECT VBpp IF (-2 ("un") + MascSg) (-1 ("còp")) ;

REMOVE ("corsa") OR ("corses") IF (0 ("cors")) (1 De) (2 Lenga);

# NUM

SELECT NUM IF (-1 ("numero") OR ("numèro") OR ("numeró")) (0 Un);
REMOVE NUM IF (NOT -1 ("numero") OR ("numèro") OR ("numeró")) (0 Un);

# PREAV

REMOVE PREAV IF (NOT 1 AJ OR AV OR VBpp) ;
SELECT AV IF (-1 Ser + &&AcordSP) (0 ("plan")) (1 VBpp + &&AcordSP) ;
SELECT AV IF (-2 Ser + &&AcordSP) (-1 AV) (0 ("plan")) (1 VBpp + &&AcordSP) ;
SELECT AV IF (-1 Ser + VBinfger) (0 ("plan")) (1 VBpp) ;
SELECT AV IF (-2 Ser + VBinfger) (-1 AV) (0 ("plan")) (1 VBpp) ;
SELECT AV IF (-1 Ser + &&AcordSP) (0 ("plan")) (1 VBpp + &&AcordSP) ;
SELECT AV IF (-2 Ser + &&AcordSP) (-1 AV) (0 ("plan")) (1 VBpp + &&AcordSP) ;
SELECT AV IF (-1C V) (0 ("plan")) (NOT 1 AJ) ;	# parlar plan
SELECT AV IF (-2C V) (-1 AV OR PREAV OR PRencl) (0 ("plan")) (NOT 1 AJ) ;	# parlar pas plan
SELECT AV IF (-3C V) (-2 AV OR PRencl) (-1 AV OR PREAV) (0 ("plan")) (NOT 1 AJ) ;	# parlar pas hèra plan
SELECT PREAV IF (-1C V) (0 ("plan")) (1 AJ) ;	# parlar plan fòrt

SELECT AV IF (-1C Haver) (0 PREAV) (1 VBpp) ;	# ai plan ascotat
SELECT AV IF (-2C Haver) (-1 AV) (0 PREAV) (1 VBpp) ;	# ai pas plan ascotat
REMOVE AV IF (0 PREAV) (0 AV) (1C AJ OR AV OR VBpp) ;
REMOVE PREAV IF (0 PREAV) (0 AV) (1C V) ;
REMOVE PREAV IF (0 PREAV) (0 AV) (NOT 1 AJ OR AV OR VBpp) ;
SELECT PREAV IF (-1 N + &&AcordSN) (NOT -1 Vconj) (0 AV OR ("mal")) (1 AJ_PP + &&AcordSN) ;
SELECT PREAV IF (-1 AJ + &&AcordSN) (NOT -1 Vconj) (0 AV OR ("mal")) (1 AJ_PP + &&AcordSN) ;
SELECT PREAV IF (-1 Ser + &&AcordSP) (0 AV OR ("mal")) (1 VBpp + &&AcordSP) ;
SELECT PREAV IF (-2 Ser + &&AcordSP) (-1 AV) (0 AV OR ("mal")) (1 VBpp + &&AcordSP) ;
SELECT PREAV IF (-1 Ser + VBinfger OR ("mal")) (0 AV) (1 VBpp) ;
SELECT PREAV IF (-2 Ser + VBinfger) (-1 AV) (0 AV OR ("mal")) (1 VBpp) ;

# ADJ

REMOVE AJ IF (-1 ("en")) (NOT 1 Conjco OR N OR NP) ;
SELECT AJ + &&AcordSN IF (0 AJ + MajIni + &&AcordSN) (1 NP + &&AcordSN) ;	# en Naut Comenge

REMOVE AJ IF (-1 ("de")) (0 VBinf) (1 PREP OR EOS) ;	# es riscat d'especular

# ADJ POS

REMOVE AJ + Pos IF (NOT -1 Ser) (0 AJ + Pos) ;

# N

SELECT N OR PRON OR NP IF (-1C PREP) (1 EOS) ;	# ambe fòrça. ; a res.
SELECT N OR PRON OR NP IF (-1C PREP) (1C PREP) (NOT 0 ("tròp")) ;	# discors de fin d'annada

SELECT N + &&AcordSN OR NP + &&AcordSN IF (-1C/* DET) (0C N) (-1/* DET + &&AcordSN) ;	# los acès ; deus autobús

# N / AJ

SELECT NP + &&AcordSN IF (-2 DET + &&AcordSN) (-1 AdjPre + &&AcordSN) (0 NP + &&AcordSN) (NOT -1 ("nau")) ;
SELECT NP + &&AcordSN IF (-2/* DET + &&AcordSN) (-1 AdjPre + &&AcordSN) (0 NP + &&AcordSN) (NOT -1 ("nau")) ;
SELECT N + &&AcordSN IF (-2 DET + &&AcordSN) (-1 AdjPre + &&AcordSN) (0 N + &&AcordSN) (NOT -1 ("nau")) ;
SELECT N + &&AcordSN IF (-2/* DET + &&AcordSN) (-1 AdjPre + &&AcordSN) (0 N + &&AcordSN) (NOT -1 ("nau")) ;
SELECT AJ + &&AcordSN IF (-1 DET + &&AcordSN) (0 AdjPre + &&AcordSN) (1 NP + &&AcordSN) (NOT 0 ("nau")) ;
SELECT AJ + &&AcordSN IF (-1/* DET + &&AcordSN) (0 AdjPre + &&AcordSN) (1 NP + &&AcordSN) (NOT 0 ("nau")) ;
SELECT AJ + &&AcordSN IF (-1 DET + &&AcordSN) (0 AdjPre + &&AcordSN) (1 N + &&AcordSN) (NOT 0 ("nau")) ;
SELECT AJ + &&AcordSN IF (-1/* DET + &&AcordSN) (0 AdjPre + &&AcordSN) (1 N + &&AcordSN) (NOT 0 ("nau")) ;
SELECT AJ + &&AcordSN IF (-1 De) (0 AdjPre + &&AcordSN) (1 N + &&AcordSN) (NOT 0 ("nau")) ;

SELECT NP + &&AcordSN IF (-1 DET + &&AcordSN) (0 NP + &&AcordSN) (1 AJ + &&AcordSN) ;
SELECT NP + &&AcordSN IF (-1/* DET + &&AcordSN) (0 NP + &&AcordSN) (1 AJ + &&AcordSN) ;
SELECT N + &&AcordSN IF (-1 DET + &&AcordSN) (0 N + &&AcordSN) (1 AJ + &&AcordSN) ;
SELECT N + &&AcordSN IF (-1/* DET + &&AcordSN) (0 N + &&AcordSN) (1 AJ + &&AcordSN) ;
SELECT N + &&AcordSN IF (-1 NUM + &&AcordSN) (0 N + &&AcordSN) (1 AJ + &&AcordSN) ;

SELECT NP + &&AcordSN IF (-2 DET + &&AcordSN) (-1C AJ) (-1 AJ + &&AcordSN) (0 NP + &&AcordSN) ;
SELECT N + &&AcordSN IF (-2 DET + &&AcordSN) (-1C AJ) (-1 AJ + &&AcordSN) (0 N + &&AcordSN) ;
SELECT N + &&AcordSN IF (-2 DET + &&AcordSN) (-1C NUM) (-1 NUM + &&AcordSN) (0 N + &&AcordSN) ;
SELECT N + &&AcordSN IF (-2 DET + &&AcordSN) (-1C NUM) (0 N + &&AcordSN) ;

SELECT AJ + &&AcordSN IF (-2 DET + &&AcordSN) (-1C N + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-2/* DET + &&AcordSN) (-1C N + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-2 NUM + &&AcordSN) (-1C N + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;

SELECT AJ + &&AcordSN IF (-2C N + &&AcordSN) (-1 AJ + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-2C N + &&AcordSN) (-1 AJ + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-2C N + &&AcordSN) (-1 AJ + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-3 DET + &&AcordSN) (-2 AJ + &&AcordSN) (-1C N + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-3/* DET + &&AcordSN) (-2 AJ + &&AcordSN) (-1C N + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-3 NUM + &&AcordSN) (-2 AJ + &&AcordSN) (-1C N + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;

SELECT AJ + &&AcordSN IF (-3C N + &&AcordSN) (-2 AJ + &&AcordSN) (-1 AJ + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-3C N + &&AcordSN) (-2 AJ + &&AcordSN) (-1 AJ + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;
SELECT AJ + &&AcordSN IF (-3C N + &&AcordSN) (-2 AJ + &&AcordSN) (-1 AJ + &&AcordSN) (0 AJ + &&AcordSN) (NOT 1 ("per")) (NOT 0 PREP OR VBger) ;

SELECT N + &&AcordSN IF (-1C DET + &&AcordSN) (1C EOS) ;
SELECT N + &&AcordSN IF (-1C DET + &&AcordSN) (1C PREP) ;
SELECT N + &&AcordSN IF (-1C DET + &&AcordSN) (1C Rel) ;

REMOVE N OR VBpp (-1 ("trobar") OR ("considerar") OR ("jutjar")) (0 AJ) ;
REMOVE N OR VBpp (-2 ("trobar") OR ("considerar") OR ("jutjar")) (-1 AV) (0 AJ) ;
REMOVE N OR VBpp (-3 ("trobar") OR ("considerar") OR ("jutjar")) (-2 AV) (-1 AV) (0 AJ) ;

# distincio entre MascPl i FemPl (típicament en terminacions en -es)
#SELECT MascPl IF (-1C MascPl) (0 N + MascPl) (NOT 0 ("pel")) ;	# Pb: cap de las 200 comunas
#SELECT FemPl IF (-1C FemPl) (0 N + FemPl) ;
#SELECT MascPl IF (-1C MascPl) (0 AJ + MascPl) ;
#SELECT FemPl IF (-1C FemPl) (0 AJ + FemPl) ;
#SELECT MascPl IF (1C MascPl) (0 N + MascPl) (NOT 0 ("pel")) ;
#SELECT FemPl IF (1C FemPl) (0 N + FemPl) ;
#SELECT MascPl IF (1C MascPl) (0 AJ + MascPl) ;
#SELECT FemPl IF (1C FemPl) (0 AJ + FemPl) ;
#SELECT MascPl IF (-2C MascPl) (-1 AV OR PREAV) (0 AJ + MascPl) ;
#SELECT FemPl IF (-2C FemPl) (-1 AV OR PREAV) (0 AJ + FemPl) ;
#SELECT MascPl IF (2C MascPl) (1 AV OR PREAV) (0 AJ + MascPl) ;
#SELECT FemPl IF (2C FemPl) (1 AV OR PREAV) (0 AJ + FemPl) ;

REMOVE AJ IF (NOT -2 N_AJ) (-1 CM) (0 N) (1C Que OR Qui OR PREP OR Conjadv) ;	# dab Blesin, gojat qui

# N / V

REMOVE N IF (-1C PRON) (0 V) ;		# qui sap
REMOVE V + Pers IF (-1C V + Pers) ;	# voletz ve pariar
REMOVE V + Pers IF (1C V + Pers) ;	# voletz ve pariar

REMOVE VBpp IF (-1C DET + &&AcordSN OR Pro) (0 N + &&AcordSN) ;		# lo resultat

# MOTS

SELECT Haver IF (0 A) (1C VBpp);	# a cantat
SELECT Ser IF (-1 Ser) (0 ("estat"));	# soi estat
SELECT Ser IF (-2 Ser) (-1 AV) (0 ("estat"));	# soi pas estat
SELECT Ser IF (-3 Ser) (-2 AV) (-1 AV) (0 ("estat"));	# soi pas totjorn estat

REMOVE Pro IF (NOT 1 V OR Pro OR unknown) ;
SELECT DET + &&AcordSN IF (0 ("un") + &&AcordSN) (1 ("«")) (2 N_AJ + &&AcordSN) ;
REMOVE DET IF (0 Tn) (NOT 1 N OR NP OR AJ OR NUM OR unknown OR ("«")) ;

REMOVE PRON IF (0 Se) (NOT 1 Pro OR V + P3 OR V + VBinf OR V + VBger) ;        # se canti
REMOVE PRON IF (0 Se) (1 Pro) (NOT 2 Pro OR V + P3 OR V + VBinf OR V + VBger) ;	# se li canti
REMOVE PRON IF (0 Se) (1 Pro) (2 Pro) (NOT 3 Pro OR V + P3 OR V + VBinf OR V + VBger) ;	# se li o canti
REMOVE PRON IF (0 Se) (1 Pro) (2 Pro) (3 Pro) (4 V + P3 OR V + VBinf OR V + VBger) ;
REMOVE Conjadv IF (0 Se) (1C V + VBinf) ;        # de se crear
REMOVE Conjadv IF (0 Se) (1 Pro) (2C V + VBinf) ;        # de se lo crear
#REMOVE PRON IF (0 Se) (1 ("ne")) ;	# Se n’èram estadas amigas
SELECT Conjadv IF (0 ("<s'i>"i) OR ("<s’i>"i)) (1 ("aver") OR ("auer")) ;
SELECT Conjadv IF (0 Se) (1 ("<n'i>"i) OR ("<n’i>"i)) (2 ("aver") OR ("auer")) ;
SELECT Conjadv IF (0 Se) (1 Pro) (2 Pro) (3 V) ;	# patch
SELECT Conjadv IF (0 Se) (0/* Pro) (1 Pro) (2 V) ;	# patch
SELECT Conjadv IF (0 Se) (1 Pro) (2 Pro) (3 Pro) (4 V) ;	# patch
SELECT Conjadv IF (0 Se) (0/* Pro) (1 Pro) (2 Pro) (3 V) ;	# patch
REMOVE Conjadv IF (0 Se) (0/* Pro) (-1*C N) (NOT -1* V + Pers) ;	# un ministeri s'encargue
SELECT P3 IF (-1C Se + PRON) (NOT 0 Pro) (0 V) ;		# se canti
SELECT P3 IF (-2C Se + PRON) (-1 Pro) (NOT 0 Pro) (0 V) ;	# se li canti
SELECT P3 IF (-3C Se + PRON) (-2 Pro) (-1 Pro) (NOT 0 Pro) (0 V + P3) ;	# se li o canti
REMOVE Ton IF (0 Se) (1 V) (1 P3) ;
REMOVE Ton IF (0 Se) (1 VBinf) ;
REMOVE Ton IF (0 Se) (1 Pro) ;
SELECT Pro IF (0 Se) (1C Pro OR V + P3) ;	# patch			NE MARCHE PAS DU TOUT

REMOVE P1 + Sg IF (-1 NP + Sg) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-2 DET + MascSg) (-1 N + MascSg) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-2 DET + FemSg) (-1 N + FemSg) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-3 DET + MascSg) (-2 N_AJ + MascSg) (-1 N_AJ + MascSg) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-3 DET + FemSg) (-2 N_AJ + FemSg) (-1 N_AJ + MascSg) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-3C N_AJ + Sg) (-2 PREP) (-1 N) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-4C N_AJ + Sg) (-3 PREP) (-2 N_AJ + &&AcordSN) (-1 N_AJ + &&AcordSN) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-4C N_AJ + Sg) (-3 PREP) (-2 DET + &&AcordSN) (-1 N + &&AcordSN) (0 V + P3 + Sg) ;
REMOVE P1 + Sg IF (-5C N_AJ + Sg) (-4 PREP) (-3 DET + &&AcordSN) (-2 N_AJ + &&AcordSN) (-1 N_AJ + &&AcordSN) (0 V + P3 + Sg) ;

REMOVE PRS IF (-1 BOS) ;
REMOVE PRS IF (-1C Se + Conjadv) ;
REMOVE PRS IF (-2C Se + Conjadv) (-1 Pro OR AV) ;
REMOVE PRS IF (-3C Se + Conjadv) (-2 Pro OR AV) (-1 Pro OR AV) ;
REMOVE PRS IF (-4C Se + Conjadv) (-3 Pro OR AV) (-2 Pro OR AV) (-1 Pro OR AV) ;
SELECT PRI IF (-2C PRI) (-1 Conjco) (0 PRS) (0 PRI) ; # il revoit et corrige
SELECT PRS IF (-2C PRS) (-1 Conjco) (0 PRS) (0 PRI) ;
SELECT PRI IF (2C PRI) (1 Conjco) (0 PRS) (0 PRI) ; # il corrige et revoit
SELECT PRS IF (2C PRS) (1 Conjco) (0 PRS) (0 PRI) ;
REMOVE PRI IF (-1* ("per que") BARRIER CM) (0 PRS) ;
REMOVE PRI (*-1 ("après que") OR ("per que") OR ("per tal que") OR ("per fin que") OR ("a fin que") OR ("afin que") OR ("malgrat que") OR ("maugrat que") OR ("encara que") OR ("abans que") OR ("avans que") OR ("après que") OR ("aprèp que") OR ("apuèi que") BARRIER Cnj_Rel_End OR CM) (0 PRS) ;


SELECT PREP IF (0 Dins) (1 DET) ;
SELECT PREP IF (0 Pendent) (1 DET) ;


REMOVE NP IF (-1 BOS) (0 ("Òc")) ;
REMOVE NP IF (-2 BOS) (-1 (META:/-/r)) (0 ("Òc")) (1 CM) ;
REMOVE NP IF (-1 (META:/[—]/r)) (0 ("Òc")) (1 CM) ;

SELECT N IF (-1 DET + Masc) (NOT -1 Ser) (0 Estat) ;
SELECT VBpp IF (-1 Ser + Sg) (0 Estat + Sg) ;
#SELECT VBpp IF (-1 Ser + Pl) (0 Estat + Pl) ;
SELECT Ser IF (0 Ser + Sg) (1 Ser + VBpp + Sg) ;
SELECT Ser IF (0 Ser + Pl) (1 Ser + VBpp + Pl) ;
SELECT VBpp IF (-2 Ser + Sg) (-1 AV) (0 Estat + Sg) ;
SELECT VBpp IF (-2 Ser + Pl) (-1 AV) (0 Estat + Pl) ;
SELECT Ser IF (0 Ser + Sg) (1 AV) (2 Ser + VBpp + Sg) ;
SELECT Ser IF (0 Ser + Pl) (1 AV) (2 Ser + VBpp + Pl) ;
SELECT N IF (-1 ("vila") OR ("ciutat")) (0 Estat) ;	# vila estat

REMOVE AJ IF (0 Las) (1 N + FemPl) ;	# las pomas
REMOVE AJ IF (0 Las) (1 NP + FemPl) ;	# las Corbièras
REMOVE AJ IF (0 Las) (1 NUM) (2 N + FemPl) ;	# las 200 pomas
REMOVE AJ IF (0 Las) (1 AJ OR AdvComp) (2 N_AJ + FemPl) ;

SELECT Conjco IF (0 Mas_cnjcoo) (-1 CM) ;
SELECT Conjco IF (0 Mas_cnjcoo) (-1 BOS) ;
REMOVE N IF (0 ("mas")) (NOT -1/* DET + MascSg) ;
SELECT Conjco IF (0 ("mas")) (NOT -1/* DET + MascSg) (1C V) ;

REMOVE N IF (-1C V) (0 Pel) ;
REMOVE N IF (0 Pel) (1 unknown) ;

#deu -> dever / de +lo
LIST Deu = "deu" ;
SELECT V IF (0 ("<deu>")) (1 SENT OR Pro) ;
REMOVE V IF (0 ("<deu>")) (NOT 1 VBinf OR AV) ;

# de las + adj
SELECT DET IF (0 ("<la>"i) OR ("<las>"i)) (-1 ("de")) (1 AJ + Fem) ;

# la, las (det)
SELECT DET IF (0 ("<la>"i)) (1C N_AJ + FemSg) ;
SELECT DET IF (0 ("<las>"i)) (1C N_AJ + FemPl) ;	# atencion : las casas (np.pro vblex)

#pel/peu nom o article contractat
REMOVE N IF (1 N + MascSg) (0 ("<peu>"i) OR ("<pel>"i)) (NOT -1 DET + Sg) (NOT -1 Artcontrsg) ;
REMOVE N IF (1 N + MascPl) (0 ("<peus>"i) OR ("<pels>"i)) (NOT -1 DET + Pl) (NOT -1 Artcontrpl) ;
REMOVE N IF (1 NP + MascSg) (0 ("<peu>"i) OR ("<pel>"i)) (NOT -1 DET + Sg) (NOT -1 Artcontrsg) ;
REMOVE N IF (1 NP + MascPl) (0 ("<peus>"i) OR ("<pels>"i)) (NOT -1 DET + Pl) (NOT -1 Artcontrpl) ;
REMOVE N IF (1 AdjPre + MascSg) (0 ("<peu>"i) OR ("<pel>"i)) (NOT -1 DET + Sg) (NOT -1 Artcontrsg) ;
REMOVE N IF (1 AdjPre + MascPl) (0 ("<peus>"i) OR ("<pels>"i)) (NOT -1 DET + Pl) (NOT -1 Artcontrpl) ;

# de còps
REMOVE PREP IF (NOT -1 N_AJ) (0 ("de còps")) ;

#punt de vista
SELECT SUB:1 Nf IF (0 PREP) (-1 ("punt") OR ("ponch")) (0 ("<de vista>")) ;

#mes de mai
SELECT SUB:1 Nm IF (0 PREP) (-1 ("mes")) (0 ("<de mai>")) ;
SELECT SUB:1 Nm IF (0 PREP) (-1 Nummois) (0 ("<de mai>")) ;

#mes mois
REMOVE AV IF (0 ("mes")) (-1 DET) (-1 MascSg) ;
REMOVE AV IF (0 ("mes")) (-1/* PREP + DET) ;

#qui cnjadv o rel
REMOVE Conjadv IF (0 ("qui")) (NOT -1 AJ OR V OR AV) ;

#Lo jorn de la setmana es un nom s'es precedit d'un determinant
REMOVE AV IF (-1 DET) (0 Jorns) ;
